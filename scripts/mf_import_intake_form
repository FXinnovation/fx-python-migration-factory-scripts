#!/usr/bin/env python3

import argparse
import logging
import os

import mf
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester, MfField, MigrationFactoryDataValidator, Server, Wave, App
from mf.utils import EnvironmentVariableFetcher, MessageBag, Utils


class IntakeFormImporter:
    """ Validate and import CSV to create Wave, App and Servers in the Migration Factory """

    _arguments = []
    _endpoints_loader = {}
    _migration_factory_requester = None
    _migration_factory_data_validator = None
    _path_wave = ''
    _validation_error_bag = MessageBag('error')
    _csv_content = []

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)
        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._migration_factory_data_validator = MigrationFactoryDataValidator()

    def read_wave_csv(self):
        if not self._csv_content:
            self._csv_content = Utils.csv_to_dicts(os.path.join(self._path_wave, mf.FILE_CSV_WAVE_TEMPLATE))

        return self._csv_content

    def get_csv_content(self):
        return self.read_wave_csv()

    def import_file(self):
        mf_servers = []

        print('### Validating input CSV…', end=' ')

        for server in self.get_csv_content():
            mf_server = Server(
                data=server,
                app=App(
                    data=server,
                    wave=Wave(data=server)
                )
            )
            mf_servers.append(mf_server)

            existing_wave = self._migration_factory_requester.get_user_wave_by_name(server[MfField.WAVE_NAME])
            existing_app = None

            if existing_wave:
                logging.getLogger('root').info('{}: “{}” wave already exists.'.format(
                    self.__class__.__name__, server[MfField.APP_NAME]
                ))

                wave = Wave(existing_wave, existing_wave[MfField.WAVE_ID])

                existing_app = self._migration_factory_requester.get_user_app_by_name(server[MfField.APP_NAME])

                mf_server.get_app().set_wave(wave)

                if existing_app:
                    logging.getLogger('root').info('{}: “{}” app already exists.'.format(
                        self.__class__.__name__, server[MfField.APP_NAME]
                    ))
                    mf_server.get_app().fill(existing_app, existing_app[MfField.APP_ID])

            self._validate_app_with_existing(existing_app, mf_server.get_app())
            self._validate_wave_with_existing(existing_wave, mf_server.get_app().get_wave())

            logging.getLogger('root').debug("{}: Server input:\n{}\n".format(
                self.__class__.__name__, mf_server.to_dict()
            ))

            logging.getLogger('root').debug("{}: App input {}:\n{}\n".format(
                self.__class__.__name__,
                mf_server.get_app().get_id(),
                mf_server.get_app().to_dict()
            ))

            logging.getLogger('root').debug("{}: Wave input {}:\n{}\n".format(
                self.__class__.__name__,
                mf_server.get_app().get_wave().get_id(),
                mf_server.get_app().get_wave().to_dict()
            ))

        self._migration_factory_data_validator.validate_servers_data(mf_servers)

        self._validation_error_bag.unload(logging.getLogger('root'))

        if not self._validation_error_bag.is_empty():
            exit(1)

        print('✔ Done')

        print('### Create waves…')
        created_waves = {}
        for mf_server in mf_servers:
            if mf_server.get_app().get_wave().is_filled():
                continue

            if mf_server.get_app().get_wave().get(MfField.WAVE_NAME) in created_waves.keys():
                mf_server.get_app().set_wave(created_waves[mf_server.get(MfField.WAVE_NAME)])
                continue

            wave = Wave({
                MfField.WAVE_NAME: mf_server.get_app().get_wave().get(MfField.WAVE_NAME),
                MfField.WAVE_DESCRIPTION: 'Wave for {}'.format(mf_server.get_app().get_wave().get(MfField.WAVE_NAME))
            })

            print('## New wave {}…'.format(mf_server.get_app().get_wave().get(MfField.WAVE_NAME)))

            self._migration_factory_requester.post(
                uri=MigrationFactoryRequester.URI_USER_WAVE_LIST,
                data=wave.to_post_payload()
            )

            new_wave = self._migration_factory_requester.get_user_wave_by_name(
                mf_server.get_app().get_wave().get(MfField.WAVE_NAME)
            )

            wave.set_id(new_wave[MfField.WAVE_ID])
            created_waves[mf_server.get(MfField.WAVE_NAME)] = wave

            mf_server.get_app().set_wave(wave)

        print('✔ Done')

        print('### Create apps…')
        created_apps = {}
        for mf_server in mf_servers:
            if mf_server.get_app().is_filled():
                continue

            if mf_server.get_app().get(MfField.APP_NAME) in created_apps.keys():
                mf_server.set_app(created_apps[mf_server.get(MfField.APP_NAME)])
                continue

            print('## New app {}…'.format(mf_server.get_app().get(MfField.APP_NAME)))

            new_app = self._migration_factory_requester.post(
                uri=MigrationFactoryRequester.URI_USER_APP_LIST,
                data=mf_server.get_app().to_post_payload()
            )

            mf_server.get_app().set_id(new_app[MfField.APP_ID])

            created_apps[mf_server.get(MfField.APP_NAME)] = mf_server.get_app()

        print('✔ Done')

        print('### Setting server data…')
        for mf_server in mf_servers:
            existing_server = self._migration_factory_requester.get_user_server_by_name(
                mf_server.get(MfField.SERVER_NAME)
            )

            if existing_server:
                mf_server.set_id(existing_server[MfField.SERVER_ID])

                print('## Update server {}…'.format(mf_server.get(MfField.SERVER_NAME)))
                self._migration_factory_requester.put(
                    uri=MigrationFactoryRequester.URI_USER_SERVER.format(existing_server[MfField.SERVER_ID]),
                    data=mf_server.to_put_payload()
                )
            else:
                print('## New server {}…'.format(mf_server.get(MfField.SERVER_NAME)))
                new_server = self._migration_factory_requester.post(
                    uri=MigrationFactoryRequester.URI_USER_SERVER_LIST,
                    data=mf_server.to_post_payload()
                )
                mf_server.set_id(new_server[MfField.SERVER_ID])

            print('✔ Done')

    def _validate_app_with_existing(self, existing_app, app):
        if existing_app and \
                existing_app[MfField.CLOUDENDURE_PROJECT_NAME] != app.get(MfField.CLOUDENDURE_PROJECT_NAME):
            self._validation_error_bag.add(
                '{}: Given “{}” as CloudEndure project name does not match existing “{}”.'.format(
                    self.__class__.__name__,
                    app.get(MfField.CLOUDENDURE_PROJECT_NAME),
                    existing_app[MfField.CLOUDENDURE_PROJECT_NAME]
                )
            )

        if existing_app and existing_app[MfField.AWS_ACCOUNT_ID] != app.get(MfField.AWS_ACCOUNT_ID):
            self._validation_error_bag.add(
                '{}: Given “{}” as AWS accountID does not match existing “{}”.'.format(
                    self.__class__.__name__,
                    app.get(MfField.AWS_ACCOUNT_ID),
                    existing_app[MfField.AWS_ACCOUNT_ID]
                )
            )

    def _validate_wave_with_existing(self, existing_wave, wave):
        if existing_wave and existing_wave[MfField.WAVE_NAME] != wave.get(MfField.WAVE_NAME):
            self._validation_error_bag.add(
                '{}: Given “{}” as Wave name does not match existing “{}”.'.format(
                    self.__class__.__name__, wave.get(MfField.WAVE_NAME), existing_wave[MfField.WAVE_NAME]
                )
            )


if __name__ == '__main__':
    intake_form_importer = IntakeFormImporter()
    intake_form_importer.import_file()
