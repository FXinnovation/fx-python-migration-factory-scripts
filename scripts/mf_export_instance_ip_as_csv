#!/usr/bin/env python3

from __future__ import print_function
import sys
import argparse
import requests
import json
import boto3
import getpass
import datetime
import logging
import csv
import os

import mf
from mf.utils import EnvironmentVariableFetcher, Utils
from mf.config_loaders import EndpointsLoader
from mf.cloud_endure import CloudEndureRequester
from mf.migration_factory import MigrationFactoryRequester, MfField
from mf.aws import AWSServiceAccessor


class Ec2InstanceExporter:

    _cloud_endure_requester = None
    _migration_factory_requester = None
    _endpoints_loader = None
    _aws_service_accessor = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to act on')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._cloud_endure_requester = CloudEndureRequester()

        self._aws_service_accessor = AWSServiceAccessor()

    def export_ip_as_csv(self):
        instances = []

        instance_ids = self._get_instance_ids()

        if not instance_ids:
            return

        for instance_id in instance_ids:
            instance_id['ips'] = ';'.join(self._aws_service_accessor.get_ec2_instance_ips(instance_id['machine_cloud_id']))
            instances.append(instance_id)

        Utils.write_csv_with_headers(os.path.join(self._path_wave, 'ips.csv'), instances)

    def _get_instance_ids(self):
        apps = self._migration_factory_requester.get_user_apps_by_wave_name(self._arguments.wave_name)

        _machine_ids = []
        for app in apps:
            if MfField.CLOUDENDURE_PROJECT_NAME not in app:
                logging.getLogger('root').warn("\n{}: app “{}” is in wave “{}” but it seems it doesn’t have a cloudendure project by that name.".format(
                    self.__class__.__name__, app[MfField.APP_NAME], self._arguments.wave_name
                ))
                continue

            _ce_machines = self._cloud_endure_requester.get_machines(app[MfField.CLOUDENDURE_PROJECT_NAME])
            if not _ce_machines:
                continue
            for _ce_machine in _ce_machines['items']:
                if _ce_machine['replica'] == '':
                    logging.getLogger('root').warn("\n{}: machine “{}” wasn’t launched as a test/cutover target yet.".format(
                        self.__class__.__name__, _ce_machine['sourceProperties']['name']
                    ))

                _ce_replica = self._cloud_endure_requester.get_machine_replica(_ce_machine['replica'], app[MfField.CLOUDENDURE_PROJECT_NAME])

                instance_information = {}
                instance_information['machine_name'] = _ce_machine['sourceProperties']['name']
                instance_information['machine_cloud_id'] = _ce_replica['machineCloudId']

                _machine_ids.append(instance_information)
        return _machine_ids


if __name__ == '__main__':
    ec2_instance_exporter = Ec2InstanceExporter()
    ec2_instance_exporter.export_ip_as_csv()
