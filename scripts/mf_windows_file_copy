#!/usr/bin/env python3

from __future__ import print_function

import argparse
import logging
import os
from threading import Thread

import mf
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester
from mf.utils import EnvironmentVariableFetcher, PowershellRunner


class PostLaunchFileCopier:
    """ Copy post-launch files from to the source servers (Windows only) """

    WINDOWS_POST_LAUNCH_DESTINATION = "C:\\Program Files (x86)\\CloudEndure\\post_launch"

    _arguments = []
    _endpoints_loader = {}
    _migration_factory_requester = None
    _path_wave_post_launch = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to delete')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )
        parser.add_argument(
            '--source',
            default=mf.PATH_DEFAULT_POST_LAUNCH,
            help="Generic post-launch files to copy (.exe, .bat of .sh)."
                 " Defaults to {}."
                 " Specific post-launch files will be fetched in wave directory dynamically.".format(
                mf.PATH_DEFAULT_POST_LAUNCH
            )
        )
        parser.add_argument(
            '--windows-user',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
                default=''
            ),
            help="The windows username. Will fetch {} by default".format(mf.ENV_VAR_WINDOWS_USERNAME.join(', '))
        )
        self._path_wave_post_launch = os.path.join(mf.PATH_HOME, self._arguments.wave_name, mf.DIRECTORY_POST_LAUNCH)

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )

    def copy(self):
        if not os.path.exists(self._arguments.source):
            logging.error('{}: “{}” directory does not exists.'.format(
                self.__class__.__name__, self._arguments.source
            ))

        print('### Fetching servers list…')
        servers = self._migration_factory_requester.get_user_server_by_name(self._arguments.wave_name)
        print('### ✔ Done')

        print('### Copying post_launch files to post_launch folder in source servers…')

        domain_password = ''
        if self._has_windows_user():
            domain_password = EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD,
                env_var_description='Windows password',
                sensitive=True
            )

        create_destination_tasks = []
        copy_files_tasks = []
        for server in servers:
            create_path_command = 'Invoke-Command -ComputerName {} -ScriptBlock {if (!(Test-path "{}")) {New-Item -Path "{}" -ItemType directory}}'.format(
                server,
                self.WINDOWS_POST_LAUNCH_DESTINATION,
                self.WINDOWS_POST_LAUNCH_DESTINATION,
            )
            copy_command = 'Copy-Item "{}/*" "{}" -ToSession (New-PSSession -ComputerName "{}" {})'.format(
                self._arguments.source,
                self.WINDOWS_POST_LAUNCH_DESTINATION,
                server,
                '{}',
            )

            if self._has_windows_user():
                create_path_command = PowershellRunner.authenticate_command(
                    create_path_command,
                    self._arguments.windows_user,
                    domain_password
                )
                copy_command = PowershellRunner.insert_authenthication_arguments(
                    copy_command,
                    self._arguments.windows_user,
                    domain_password
                )
            else:
                copy_command = copy_command.format('')

            create_destination_task = Thread(
                target=self._do_create_destination_directory,
                args=[create_path_command, server]
            )
            create_destination_tasks.append(create_destination_task)

            copy_task = Thread(
                target=self._do_copy,
                args=[copy_command, server]
            )
            copy_files_tasks.append(copy_task)

        for task in create_destination_tasks:
            task.start()

        for task in create_destination_tasks:
            task.join()

        for task in copy_files_tasks:
            task.start()

        for task in copy_files_tasks:
            task.join()

        print('### ✔ Done')


    def _do_create_destination_directory(self, create_path_command: str, server_name: str):
        logging.getLogger('root').info(
            self.__class__.__name__ + ':Running “{}”'.format(create_path_command)
        )

        print("# Creating post-launch directory on server “{}”…", end=''.format(
            server_name
        ))
        PowershellRunner.run(create_path_command)
        print('### ✔ Done')

    def _do_copy(self, copy_command: str, source: str, server_name: str):
        logging.getLogger('root').info(
            self.__class__.__name__ + ':Running “{}”'.format(copy_command)
        )

        print("# Copying files from “{}” to server “{}”…".format(
            source,
            server_name
        ))
        PowershellRunner.run(copy_command)
        print('### ✔ Done')

    def _has_windows_user(self):
        return self._arguments.windows_user != ""


if __name__ == '__main__':
    post_launch_file_copier = PostLaunchFileCopier()
    post_launch_file_copier.copy()
