#!/usr/bin/env python3

from __future__ import print_function

import argparse
import logging
import os
from threading import Thread

import mf
from mf.config_loaders import EndpointsLoader, ConfigLoader
from mf.migration_factory import MigrationFactoryRequester, MfField
from mf.notification import Notifier
from mf.utils import EnvironmentVariableFetcher, PowershellRunner


class PostLaunchFileCopier:
    """ Copy post-launch files from to the source servers (Windows only) """

    WINDOWS_POST_LAUNCH_DESTINATION = 'c:\Program Files (x86)\CloudEndure\post_launch'

    _arguments = []
    _endpoints_loader = {}
    _migration_factory_requester = None
    _path_wave_post_launch = None
    _domain_password = None
    _notifier = None
    _config_loader = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to delete')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )
        parser.add_argument(
            '--source',
            default=mf.PATH_DEFAULT_POST_LAUNCH,
            help="Generic post-launch files to copy (.exe, .bat of .sh)."
                 " Defaults to {}."
                 " Specific post-launch files will be fetched in wave directory dynamically.".format(
                     mf.PATH_DEFAULT_POST_LAUNCH
                 )
        )
        parser.add_argument(
            '--windows-username',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
                default=''
            ),
            help="The windows username. Will fetch {} by default".format(', '.join(mf.ENV_VAR_WINDOWS_USERNAME))
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._path_wave_post_launch = os.path.join(mf.PATH_HOME, self._arguments.wave_name, mf.DIRECTORY_POST_LAUNCH)
        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._config_loader = ConfigLoader()
        self._notifier = Notifier(self._config_loader.get_notifications_config())

        if self._has_windows_user():
            self._domain_password = EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD,
                env_var_description='Windows password',
                default='',
                sensitive=True
            )

    def copy(self):
        if not os.path.exists(self._arguments.source):
            logging.error('{}: “{}” directory does not exists.'.format(
                self.__class__.__name__, self._arguments.source
            ))
        print('### Fetching servers list…', end='', flush=True)
        servers = self._migration_factory_requester.get_user_servers_by_wave_and_os(
            self._arguments.wave_name, 'windows'
        )
        logging.getLogger('root').debug(
            self.__class__.__name__ + ":Found servers: \n “{}”".format(servers)
        )
        print(' ✔ Done')

        print('### Copying post-launch files to post-launch folder in source servers…')

        create_destination_tasks = []
        copy_files_tasks = []
        for server in servers:
            server_fqdn = server[MfField.SERVER_FQDN].strip()
            create_path_command = f'Invoke-Command -ComputerName {server_fqdn} -ScriptBlock {{if (!(Test-path "{self.WINDOWS_POST_LAUNCH_DESTINATION}")) {{New-Item -Path "{self.WINDOWS_POST_LAUNCH_DESTINATION}" -ItemType directory}}}}'

            if self._has_windows_user():
                create_path_command = PowershellRunner.authenticate_command(
                    create_path_command,
                    self._arguments.windows_username,
                    self._domain_password
                )

            create_destination_task = Thread(
                target=self._do_run_powershell,
                args=[create_path_command],
                name=server_fqdn
            )
            create_destination_tasks.append(create_destination_task)

            for task in create_destination_tasks:
                print("# Creating post-launch directory on server “{}”…".format(task.getName()))
                task.start()

            for task in create_destination_tasks:
                task.join()
                print('# ✔ Done: {} '.format(task.getName()))

            all_scripts_pathes = self._find_all_windows_scripts(self._arguments.source)
            all_scripts_pathes.extend(self._find_all_windows_scripts(self._path_wave_post_launch))

            for script_path in all_scripts_pathes:
                copy_task = Thread(
                    target=self._do_run_powershell,
                    args=[self._get_copy_command(script_path, server_fqdn)],
                    name='from “{}” to “{}”'.format(script_path, server_fqdn)
                )
                copy_task.getName()
                copy_files_tasks.append(copy_task)

        for task in copy_files_tasks:
            print("# Copying files {}…".format(task.getName()))
            task.start()

        for task in copy_files_tasks:
            task.join()
            print('# ✔ Done: {}'.format(task.getName()))

        print('### ✔ Done')

        print('### …')

        print('### Notifying…', end='', flush=True)

        self._notifier.notify(
            Notifier.POST_LAUNCH_SCRIPTS_UPDATED,
            Notifier.POST_LAUNCH_SCRIPTS_UPDATED_MESSAGE.format(self._arguments.wave_name)
        )

        print(' ✔ Done')

    def _find_all_windows_scripts(self, basepath: str) -> list:
        return [
            f'{basepath}/*.bat',
            f'{basepath}/*.exe',
            f'{basepath}/*.cmd',
            f'{basepath}/*.ps1',
        ]

    def _find_all_linux_scripts(self, basepath: str) -> list:
        return [
            f'{basepath}/*.sh',
        ]

    def _get_copy_command(self, filepath: str, server_fqdn: str, ) -> str:
        copy_command = 'Copy-Item "{}" "{}" -ToSession (New-PSSession -ComputerName "{}" %s) | Out-Null'.format(
            filepath,
            self.WINDOWS_POST_LAUNCH_DESTINATION,
            server_fqdn,
            '{}',
        )

        if self._has_windows_user():
            copy_command = PowershellRunner.insert_authenthication_arguments(
                copy_command,
                self._arguments.windows_username,
                self._domain_password
            )
        else:
            copy_command = copy_command % ''

        return copy_command

    def _do_run_powershell(self, command: str):
        logging.getLogger('root').info(
            self.__class__.__name__ + ':Running “{}”'.format(command)
        )

        PowershellRunner.run(command)

    def _has_windows_user(self):
        return self._arguments.windows_username != ""


if __name__ == '__main__':
    post_launch_file_copier = PostLaunchFileCopier()
    post_launch_file_copier.copy()
