#!/usr/bin/env python3

from __future__ import print_function

import argparse
import glob
import logging
import ntpath
import os
import sys
import zipfile
from threading import Thread
from typing import List

import mf
from mf.config_loaders import EndpointsLoader, ConfigLoader
from mf.migration_factory import MigrationFactoryRequester, MfField
from mf.notification import Notifier
from mf.ssh import SSHConnector
from mf.utils import EnvironmentVariableFetcher, PowershellRunner


class Host:
    """
        Represents any kind of host for post-launch file copy
    """

    _server_fqdn = ''
    _wave_name = ''
    _zip_filename = ''
    _path_generic_post_launch = ''
    _path_wave_post_launch = ''
    _path_server_post_launch = ''

    def __init__(
            self,
            _server_fqdn: str,
            _wave_name: str,
            _path_wave_post_launch: str,
            _path_generic_post_launch: str
    ):
        self._server_fqdn = _server_fqdn
        self._wave_name = _wave_name
        self._zip_filename = os.path.join(mf.PATH_HOME, _wave_name, _server_fqdn + '.zip')
        self._path_generic_post_launch = _path_generic_post_launch
        self._path_wave_post_launch = _path_wave_post_launch
        self._path_server_post_launch = os.path.join(self._path_wave_post_launch, _server_fqdn)

    def get_valid_post_launch_file_extensions(self, basepath: str) -> list:
        pass

    def find_all_post_launch_scripts(self) -> list:
        os.makedirs(name=self._path_generic_post_launch, exist_ok=True)
        os.makedirs(name=self._path_wave_post_launch, exist_ok=True)
        os.makedirs(name=self._path_server_post_launch, exist_ok=True)

        all_scripts_pathes = self.get_valid_post_launch_file_extensions(self._path_generic_post_launch)
        all_scripts_pathes.extend(self.get_valid_post_launch_file_extensions(self._path_wave_post_launch))
        all_scripts_pathes.extend(self.get_valid_post_launch_file_extensions(self._path_server_post_launch))

        post_launch_files = {}
        for file_path in all_scripts_pathes:
            for filename in glob.glob(file_path):
                basename = ntpath.basename(filename)
                post_launch_files[basename] = filename

        return list(post_launch_files.values())

    def get_pre_copy_tasks(self) -> list:
        pass

    def get_copy_tasks(self) -> list:
        pass

    def get_post_copy_tasks(self) -> list:
        pass

    def get_cleanup_tasks(self) -> list:
        pass

    def _zip_all_post_launch_scripts(self):
        zip_file = zipfile.ZipFile(self._zip_filename, 'w')

        for filename in self.find_all_post_launch_scripts():
            zip_file.write(filename, os.path.basename(filename))

        zip_file.close()

    def _delete_post_launch_zip(self):
        if os.path.exists(self._zip_filename):
            os.remove(self._zip_filename)


class WindowsHost(Host):
    """
        Represents a Windows host for post-launch file copy
    """

    WINDOWS_POST_LAUNCH_DESTINATION = 'c:\\Program Files (x86)\\CloudEndure\\post_launch\\'

    _username = ''
    _password = ''

    def __init__(
            self,
            _server_fqdn: str,
            _wave_name: str,
            _path_wave_post_launch: str,
            _path_generic_post_launch: str,
            _username: str,
            _password: str = None
    ):
        self._username = _username
        self._password = _password

        super().__init__(_server_fqdn, _wave_name, _path_wave_post_launch, _path_generic_post_launch)

    def get_valid_post_launch_file_extensions(self, basepath: str) -> list:
        return [
            f'{basepath}/*.bat',
            f'{basepath}/*.exe',
            f'{basepath}/*.cmd',
            f'{basepath}/*.ps1',
        ]

    def get_pre_copy_tasks(self) -> list:
        return [Thread(
            target=self._do_run_powershell,
            args=[self._get_create_destination_path_command()],
            name='Create destination post-launch dir on ' + self._server_fqdn
        ), Thread(
            target=self._zip_all_post_launch_scripts,
            args=[],
            name='Zip post-launch scripts for {}'.format(self._server_fqdn)
        )]

    def get_copy_tasks(self) -> list:
        return [Thread(
            target=self._do_run_powershell,
            args=[self._get_copy_command(self._zip_filename)],
            name='Copy “{}” to “{}”'.format(self._zip_filename, self._server_fqdn)
        )]

    def get_post_copy_tasks(self) -> list:
        return [Thread(
            target=self._do_run_powershell,
            args=[self._get_unzip_command()],
            name='Unzip “{}.zip” on server'.format(self._server_fqdn)
        ),
            Thread(
            target=self._do_run_powershell,
            args=[self._get_unzip_command_pwsh4()],
            name='Unzip (pwsh4) “{}.zip” on server'.format(self._server_fqdn)
        )]

    def get_cleanup_tasks(self) -> list:
        return [
            Thread(
                target=self._delete_post_launch_zip,
                args=[],
                name='Remove zip local archive “{}” '.format(self._zip_filename)
            ), Thread(
                target=self._do_run_powershell,
                args=[self._get_remove_zip_command()],
                name='Remove zip distant archive “{}” '.format(self._zip_filename)
            ),
        ]

    def _do_run_powershell(self, command: str):
        logging.getLogger('root').info(
            self.__class__.__name__ + ':Running “{}”'.format(command)
        )

        PowershellRunner.run(command)

    def _get_unzip_command_pwsh4(self):
        #
        command = f'Invoke-Command -ComputerName {self._server_fqdn} ' \
                  f'-ScriptBlock {{' \
                  f'Add-Type -Assembly "System.IO.Compression.Filesystem"; [System.IO.Compression.ZipFile]::ExtractToDirectory(' \
                  f'"{self.WINDOWS_POST_LAUNCH_DESTINATION}{self._server_fqdn}.zip",' \
                  f'"{self.WINDOWS_POST_LAUNCH_DESTINATION}") | Out-Null' \
                  f'}}'

        if self._password is not None:
            command = PowershellRunner.authenticate_command(
                command,
                self._username,
                self._password
            )

        return command

    def _get_unzip_command(self):
        command = f'Invoke-Command -ComputerName {self._server_fqdn} ' \
                  f'-ScriptBlock {{' \
                  f'Expand-Archive -Path "{self.WINDOWS_POST_LAUNCH_DESTINATION}{self._server_fqdn}.zip" ' \
                  f'-Force -DestinationPath "{self.WINDOWS_POST_LAUNCH_DESTINATION}"' \
                  f'}}'

        if self._password is not None:
            command = PowershellRunner.authenticate_command(
                command,
                self._username,
                self._password
            )

        return command

    def _get_copy_command(self, filepath: str) -> str:
        command = 'Copy-Item "{}" "{}" -ToSession (New-PSSession -ComputerName "{}" %s) | Out-Null'.format(
            filepath,
            self.WINDOWS_POST_LAUNCH_DESTINATION,
            self._server_fqdn,
        )

        if self._password is not None:
            command = PowershellRunner.insert_authenthication_arguments(
                command,
                self._username,
                self._password
            )
        else:
            command = command % ''

        return command

    def _get_create_destination_path_command(self) -> str:
        create_path_command = f'Invoke-Command -ComputerName {self._server_fqdn} ' \
                              f'-ScriptBlock {{if (!(Test-path "{self.WINDOWS_POST_LAUNCH_DESTINATION}")) {{' \
                              f'New-Item -Path "{self.WINDOWS_POST_LAUNCH_DESTINATION}" -ItemType directory}}' \
                              f'}}'

        if self._password is not None:
            create_path_command = PowershellRunner.authenticate_command(
                create_path_command,
                self._username,
                self._password
            )

        return create_path_command

    def _get_remove_zip_command(self) -> str:
        create_path_command = f'Invoke-Command -ComputerName {self._server_fqdn} ' \
                              f'-ScriptBlock {{Remove-Item -Force ' \
                              f'-Path "{self.WINDOWS_POST_LAUNCH_DESTINATION}{self._server_fqdn}.zip" ' \
                              f'}}'

        if self._password is not None:
            create_path_command = PowershellRunner.authenticate_command(
                create_path_command,
                self._username,
                self._password
            )

        return create_path_command


class LinuxHost(Host):
    """
        Represents a Linux host for post-launch file copy
    """

    LINUX_POST_LAUNCH_DESTINATION = '/boot/post_launch'

    _ssh_client = None

    def __init__(
            self,
            _server_fqdn: str,
            _wave_name: str,
            _path_wave_post_launch: str,
            _path_generic_post_launch: str,
            _username: str,
            _ssh_key_file: str = None,
            _ssh_key_passphrase: str = None,
            _password: str = None
    ):
        _ssh_connector = SSHConnector(user=_username, hostname=_server_fqdn, port=22)
        self._ssh_client = _ssh_connector.connect(
            key_file_path=_ssh_key_file,
            key_passphrase=_ssh_key_passphrase,
            password=_password,
        )

        super().__init__(_server_fqdn, _wave_name, _path_wave_post_launch, _path_generic_post_launch)

    def get_valid_post_launch_file_extensions(self, basepath: str) -> list:
        return [
            f'{basepath}/*.sh',
        ]

    def get_pre_copy_tasks(self) -> list:
        return [Thread(
            target=self._ssh_client.execute,
            args=[self._get_create_path_command()],
            name='Create destination directory on {}'.format(self._server_fqdn)
        )]

    def get_copy_tasks(self) -> list:
        return [Thread(
            target=self._sftp_copy,
            args=[],
            name='Copy post-launch files to {}'.format(self._server_fqdn)
        )]

    def get_post_copy_tasks(self) -> list:
        return [Thread(
            target=self._ssh_client.execute,
            args=["sudo chmod -R 0755 {}".format(self.LINUX_POST_LAUNCH_DESTINATION)],
            name='Fix post_launch directory permissions on {}'.format(self._server_fqdn)
        )]

    def get_cleanup_tasks(self) -> list:
        return [Thread(
            target=self._close_ssh_client,
            args=[],
            name='Close SSH communication for {}'.format(self._server_fqdn)
        )]

    def _get_create_path_command(self) -> str:
        return "sudo mkdir -p {} && sudo chmod 0777 {}".format(
            self.LINUX_POST_LAUNCH_DESTINATION, self.LINUX_POST_LAUNCH_DESTINATION
        )

    def _sftp_copy(self):
        for filename in self.find_all_post_launch_scripts():
            self._ssh_client.sftp_put(
                filename, os.path.join(self.LINUX_POST_LAUNCH_DESTINATION, ntpath.basename(filename))
            )

    def _close_ssh_client(self):
        if self._ssh_client is not None:
            self._ssh_client.close()


class PostLaunchFileCopier:
    """
        Copy post-launch scripts from the current machine to the source machines
        By default, this script searches valid files in 3 locations. The last overriding the first:
         - Generic: ~/migrations/post-launch
         - Wave-specific: ~/migrations/WAVE/post-launch
         - Server-specific: ~/migrations/WAVE/post-launch/SERVER.FQDN

        This script works with Linux and Windows source machines.
        Each machine tasks will be run in parallel.

        Example:
            mf_file_copy --wave-name MyWave --skip-notify --linux-ssh-private-key-file ~/.ssh/id_server
    """

    _arguments: argparse.Namespace = None
    _endpoints_loader: EndpointsLoader = None
    _migration_factory_requester: MigrationFactoryRequester = None
    _path_wave_post_launch: str = None
    _windows_user: str = None
    _windows_password: str = None
    _linux_user: str = None
    _linux_password: str = None
    _notifier: Notifier = None
    _config_loader: ConfigLoader = None

    _pre_copy_tasks: List[Thread] = []
    _post_copy_tasks: List[Thread] = []
    _copy_tasks: List[Thread] = []
    _cleanup_tasks: List[Thread] = []

    def __init__(self):
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to act on')
        parser.add_argument('--skip-notify', action='store_true', help='Do not notify at the of the copy')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )
        parser.add_argument(
            '--generic-post-launch-directory',
            default=mf.PATH_DEFAULT_POST_LAUNCH,
            help="Generic post-launch files to copy (.exe, .bat, .cmd or .sh)."
                 " Defaults to env var {}."
                 " Other specific post-launch files will ALWAYS be fetched in wave directory dynamically.".format(
                     mf.PATH_DEFAULT_POST_LAUNCH
                 )
        )
        parser.add_argument(
            '--windows-username',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
                default_is_none=True
            ),
            help="The Windows username for the remote session to Windows machines. "
                 "Defaults to env {}.".format(mf.ENV_VAR_WINDOWS_USERNAME[0])
        )
        parser.add_argument(
            '--windows-password',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD,
                default_is_none=True,
                sensitive=True
            ),
            help="The Windows password associated with the Windows username. "
                 "Defaults to env {}."
                 "Using this parameter with a cleartext password is NOT recommended.".format(
                mf.ENV_VAR_WINDOWS_PASSWORD[0]
            )
        )
        parser.add_argument(
            '--linux-username',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_USERNAME,
                default_is_none=True
            ),
            help="The Linux username for Linux Machines. "
                 "Defaults to env var {}. ".format(mf.ENV_VAR_LINUX_USERNAME[0])
        )
        parser.add_argument(
            '--linux-password',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_PASSWORD,
                default_is_none=True,
                sensitive=True
            ),
            help="The Linux password associated with the Linux username."
                 "Defaults to env var {}."
                 "The password is ignored if SSH private key file is set."
                 "Using this parameter with a cleartext password is NOT recommended.".format(
                mf.ENV_VAR_LINUX_PASSWORD[0]
            )
        )
        parser.add_argument(
            '--linux-ssh-private-key-file',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_PRIVATE_KEY_FILE,
                default_is_none=True
            ),
            help="Complete filename to the linux private key file for Linux machines."
        )
        parser.add_argument(
            '--linux-ssh-private-key-passphrase',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_PRIVATE_KEY_PASSPHRASE,
                default_is_none=True
            ),
            help="The passphrase for the SSH private key file for the linux machines."
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._path_wave_post_launch = os.path.join(mf.PATH_HOME, self._arguments.wave_name, mf.DIRECTORY_POST_LAUNCH)
        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._config_loader = ConfigLoader()
        self._notifier = Notifier(self._config_loader.get_notifications_config())
        self._windows_user = self._arguments.windows_username
        self._windows_password = self._arguments.windows_password
        self._linux_user = self._arguments.linux_username
        self._linux_password = self._arguments.linux_password

    def copy(self):
        print('### Fetching servers list…', end='', flush=True)

        servers = self._migration_factory_requester.get_user_servers_by_wave(
            self._arguments.wave_name
        )
        logging.getLogger('root').debug(
            self.__class__.__name__ + ":Found servers: \n “{}”".format(servers)
        )

        print(' ✔ Done')

        if not servers:
            print('### No servers found in the {} wave…'.format(self._arguments.wave_name))
            sys.exit(0)

        print('### Running tasks to copy post-launch files to post-launch folder in source servers…')

        for server in servers:
            server_fqdn = server[MfField.SERVER_FQDN].strip()

            if "windows" in server[MfField.SERVER_OS].lower():
                if not self._has_windows_user():
                    self._windows_user = EnvironmentVariableFetcher.fetch(
                        env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
                        env_var_description='Windows username for remote session',
                    )

                if self._has_windows_user() and not self._has_windows_password():
                    self._windows_password = EnvironmentVariableFetcher.fetch(
                        env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD,
                        env_var_description='Windows password for remote session',
                        sensitive=True
                    )

                self._prepare_tasks(WindowsHost(
                    server_fqdn,
                    self._arguments.wave_name,
                    self._path_wave_post_launch,
                    self._arguments.generic_post_launch_directory,
                    self._windows_user,
                    self._windows_password
                ))

            elif "linux" in server[MfField.SERVER_OS].lower():
                if not self._has_linux_user():
                    self._linux_user = EnvironmentVariableFetcher.fetch(
                        env_var_names=mf.ENV_VAR_LINUX_USERNAME,
                        env_var_description='Linux username for SSH',
                    )

                if self._has_linux_user() and not self._has_linux_password() and not self._has_linux_private_key():
                    self._linux_password = EnvironmentVariableFetcher.fetch(
                        env_var_names=mf.ENV_VAR_LINUX_PASSWORD,
                        env_var_description='Linux password for SSH',
                        sensitive=True
                    )

                self._prepare_tasks(LinuxHost(
                    server_fqdn,
                    self._arguments.wave_name,
                    self._path_wave_post_launch,
                    self._arguments.generic_post_launch_directory,
                    self._linux_user,
                    self._arguments.linux_ssh_private_key_file,
                    self._arguments.linux_ssh_private_key_passphrase,
                    self._linux_password
                ))

        self._run_all_tasks([
            self._pre_copy_tasks,
            self._copy_tasks,
            self._post_copy_tasks,
            self._cleanup_tasks,
        ])

        print('### ✔ Done')

        if self._arguments.skip_notify:
            return

        print('### Notifying…', end='', flush=True)

        # Currently not possible to notify conditionally of the Threads executions before.
        # It would need to use another Threading implementation that returns results (threading.Thread don't)
        self._notifier.notify(
            Notifier.POST_LAUNCH_SCRIPTS_UPDATED,
            Notifier.POST_LAUNCH_SCRIPTS_UPDATED_MESSAGE.format(self._arguments.wave_name)
        )

        print(' ✔ Done')

    @classmethod
    def _run_all_tasks(cls, ordered_tasks_lists: list):
        for task_list in ordered_tasks_lists:
            for task in task_list:
                print("# {}…".format(task.getName()))
                task.start()

            for task in task_list:
                task.join()
                print('# ✔ Done: {} '.format(task.getName()))

            print('')

    def _prepare_tasks(self, host: Host):
        for task in host.get_pre_copy_tasks():
            self._pre_copy_tasks.append(task)

        for task in host.get_copy_tasks():
            self._copy_tasks.append(task)

        for task in host.get_post_copy_tasks():
            self._post_copy_tasks.append(task)

        for task in host.get_cleanup_tasks():
            self._cleanup_tasks.append(task)

    def _has_windows_user(self):
        return self._windows_user is not None

    def _has_windows_password(self):
        return self._windows_password is not None

    def _has_linux_user(self):
        return self._linux_user is not None

    def _has_linux_password(self):
        return self._linux_password is not None

    def _has_linux_private_key(self):
        return self._arguments.linux_ssh_private_key_file is not None


if __name__ == '__main__':
    post_launch_file_copier = PostLaunchFileCopier()
    post_launch_file_copier.copy()
