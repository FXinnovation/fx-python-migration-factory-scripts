#!/usr/bin/env python3

from __future__ import print_function

import argparse
import json
import logging
import os
import subprocess

import paramiko

import mf
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester, MfField
from mf.utils import EnvironmentVariableFetcher


class PrerequisitesChecker:
    """Check prerequisites"""

    _arguments: argparse.Namespace = None
    _endpoints_loader: EndpointsLoader = None
    _migration_factory_requester: MigrationFactoryRequester = None
    _ssh_connexion = None
    _ssh_connexion_error = ""

    _script_path = os.path.dirname(os.path.abspath(__file__))

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True)
        parser.add_argument('--cloud-endure-project-name', default="")
        parser.add_argument('--cloudendure-server-ip', required=True)
        parser.add_argument('--windows-username', default=EnvironmentVariableFetcher.fetch(
            env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
            default=''
        ),
            help="The windows username"
        )
        parser.add_argument('--linux-username', default=EnvironmentVariableFetcher.fetch(
            env_var_names=mf.ENV_VAR_LINUX_USERNAME,
            default=''
        ),
            help="The windows username"
        )
        parser.add_argument('--linux-private-key-file', default=EnvironmentVariableFetcher.fetch(
            env_var_names=mf.ENV_VAR_LINUX_PRIVATE_KEY_FILE,
            default=''
        ),
            help="The windows username"
        )
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )
        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(self._endpoints_loader)

        logging.getLogger('root').debug(self._arguments)

    def check(self):
        windows_results = self._check_windows()
        linux_results = self._check_linux()

        print('### Final results for all servers…')

        self._print_results("Windows", windows_results)
        self._print_results("Linux", linux_results)

    def _check_windows(self):
        _username = self._arguments.windows_username
        if _username != "":
            _password = EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD, env_var_description='Windows password', sensitive=True)

        windows_results = []

        _server_list = self._migration_factory_requester.get_user_servers_by_wave_and_os(
            filter_wave_name=self._arguments.wave_name, filter_os='windows')

        logging.getLogger('root').info(
            "\n{}: windows server list for wave “{}” is : “{}” are selected for deletion)".format(
                self.__class__.__name__, self._arguments.wave_name, _server_list
            ))

        if not _server_list:
            return windows_results

        print("")
        print("*********************************************")
        print("*Checking Pre-requisites for Windows servers*")
        print("*********************************************")
        print("")

        for server in _server_list:
            print('### Windows server result for ' + server[MfField.SERVER_NAME])
            _result = {}
            final = ""
            command = "Invoke-Command -ComputerName " + server[MfField.SERVER_FQDN] + " -FilePath " + os.path.dirname(
                os.path.abspath(
                    __file__)) + "/mf_prerequisites_windows.ps1 -ArgumentList " + self._arguments.cloudendure_server_ip
            if _username != "":
                command += " -Credential (New-Object System.Management.Automation.PSCredential('" + _username + \
                           "', (ConvertTo-SecureString '" + _password + "' -AsPlainText -Force))) -Authentication Negotiate"

            p = subprocess.Popen(["pwsh", "-Command", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = p.communicate()
            if output != "":
                returnlist = output.decode('utf8').split("\n")
                for r in returnlist:
                    if r.strip() != "":
                        result = r.split(":")
                        _result[result[0]] = result[1]
                        if "Pass" not in result[1]:
                            final = final + result[0] + ","
                _result["final_result"] = final[:-1]
            _result["server_name"] = server["server_fqdn"]
            _result["server_id"] = server["server_id"]
            if len(error) > 0:
                _result["error"] = error
            if 'TCP443' in _result:
                print(" TCP 443 to CE Console  : " + _result['TCP443'])
            if 'TCP1500' in _result:
                print(" TCP 1500 to Rep Server : " + _result['TCP1500'])
            if 'NET35' in _result:
                print(" .Net 3.5 version       : " + _result['NET35'])
            if 'FreeSpace' in _result:
                print(" 3GB C:\\ Free Space     : " + _result['FreeSpace'])
            print("")
            if "error" in _result:
                print(_result['error'])
            windows_results.append(_result)
        return windows_results

    def _check_ssh_connectivity(self, host, username, passkey, using_key, server_result):
        self._ssh_connexion, self._ssh_connexion_error = self._open_ssh(host, username, passkey, using_key)
        if self._ssh_connexion is None or len(self._ssh_connexion_error) > 0:
            server_result["error"] = self._ssh_connexion_error
            server_result["SSH22"] = "Fail"
            if "final_result" in server_result:
                server_result["final_result"] = server_result["final_result"] + "SSH22,"
            else:
                server_result["final_result"] = "SSH22,"
            print(" SSH 22 to source server : Fail")
        else:
            server_result["SSH22"] = "Pass"
            print(" SSH 22 to source server : Pass")

    def _check_sudo_permissions(self, server_result):
        stderr = None
        ssh_err = ''
        if self._ssh_connexion is not None:
            try:
                _, _, stderr = self._ssh_connexion.exec_command("sudo -n -l")
            except paramiko.SSHException as e:
                ssh_err = "Got exception! " + str(e)
        else:
            ssh_err = 'Unable to connect! SSH is null'

        if stderr:
            for err in stderr.readlines():
                ssh_err = ssh_err + err
        if 'password is required' in ssh_err:
            server_result["error"] = ssh_err
            server_result["SUDO"] = "Fail"
            if "final_result" in server_result:
                server_result["final_result"] = server_result["final_result"] + "SUDO,"
            else:
                server_result["final_result"] = "SUDO,"
            print(" SUDO permission         : Fail")
        else:
            server_result["SUDO"] = "Pass"
            print(" SUDO permission         : Pass")

    def _check_tcp_connectivity(self, host, port, server_result):
        stderr = None
        stdout = None
        check = "TCP" + str(port)
        ssh_err = ''
        if self._ssh_connexion is not None:
            cmd = "sudo timeout 2 bash -c '</dev/tcp/" + host + "/" + port + \
                  " && echo port is open || echo port is closed' || echo connection timeout"
            try:
                _, stdout, stderr = self._ssh_connexion.exec_command(cmd)
                str_output = ''
                for output in stdout.readlines():
                    str_output = str_output + output
                if len(str_output) > 0:
                    str_output = str_output.strip()
                    if "open" in str(str_output):
                        server_result[check] = "Pass"
                    else:
                        server_result[check] = "Fail"
                else:
                    server_result[check] = "Fail"
            except paramiko.SSHException as e:
                ssh_err = "Got exception! while executing the command " + cmd + \
                          " due to " + str(e)
        else:
            ssh_err = 'Unable to connect! SSH is null'

        if port == '1500':
            message = " TCP 1500 to Rep Server  : "
        elif port == '443':
            message = " TCP 443 to CE Console   : "
        else:
            message = "Incorrect port! "

        if stderr:
            for err in stderr.readlines():
                ssh_err = ssh_err + err
        if "refused" in ssh_err:
            server_result[check] = "Pass"
        if check in server_result:
            print(message + server_result[check])
            if server_result[check] == "Fail":
                if "final_result" in server_result:
                    server_result["final_result"] = server_result["final_result"] + check + ","
                else:
                    server_result["final_result"] = check + ","
        else:
            if len(ssh_err) > 0:
                server_result["error"] = ssh_err
            server_result[check] = "Fail"
            if "final_result" in server_result:
                server_result["final_result"] = server_result["final_result"] + check + ","
            else:
                server_result["final_result"] = check + ","
            print(message + "Fail")

    def _check_freespace(self, _directory, _minimum, server_result):
        stderr = None
        ssh_err = ''
        if self._ssh_connexion is not None:
            cmd = "df -h " + _directory + " | tail -1 | tr -s ' ' | cut -d' ' -f4"
            try:
                _, stdout, stderr = self._ssh_connexion.exec_command(cmd)
                str_output = ''
                for output in stdout.readlines():
                    str_output = str_output + output
                value = 0
                if len(str_output) > 0:
                    str_output = str_output.strip()
                    try:
                        if str_output[-1].lower() == 'g':
                            value = float(str_output[:-1])
                        else:
                            value = float(str_output)
                    except ValueError as ve:
                        ssh_err = "Got exception! for the command " + cmd + \
                                  ". The output is " + str(ve)
                if value <= _minimum:
                    ssh_err = _directory + " directory should have a minimum of " + str(
                        _minimum) + " GB free space, but got " + str(value)
            except paramiko.SSHException as e:
                ssh_err = "Got exception! while executing the command " + cmd + \
                          " due to " + str(e)
        else:
            ssh_err = 'Unable to connect! SSH is null'

        if stderr:
            for err in stderr.readlines():
                ssh_err = ssh_err + err
        if len(ssh_err) > 0:
            server_result["error"] = ssh_err
            server_result["FreeSpace"] = "Fail"
            if "final_result" in server_result:
                server_result["final_result"] = server_result["final_result"] + "FreeSpace" + str(_minimum) + ","
            else:
                server_result["final_result"] = "FreeSpace" + str(_minimum) + ","
            if _minimum == 3.0:
                print(" " + str(_minimum) + " GB " + _directory + " FreeSpace      : Fail")
            else:
                print(" " + str(_minimum) + " GB " + _directory + " FreeSpace   : Fail")
        else:
            server_result["FreeSpace"] = "Pass"
            if _minimum == 3.0:
                print(" " + str(_minimum) + " GB " + _directory + " FreeSpace      : Pass")
            else:
                print(" " + str(_minimum) + " GB " + _directory + " FreeSpace   : Pass")

    def _check_dhclient(self, server_result):
        stderr = None
        ssh_err = ''
        if self._ssh_connexion is not None:
            try:
                _, _, stderr = self._ssh_connexion.exec_command("sudo dhclient -v")
            except paramiko.SSHException as e:
                ssh_err = "Got exception! " + str(e)
        else:
            ssh_err = 'Unable to connect! SSH is null'

        if stderr:
            for err in stderr.readlines():
                ssh_err = ssh_err + err
        if len(ssh_err) > 0 and 'not found' in ssh_err:
            server_result["error"] = ssh_err
            server_result["DHCLIENT"] = "Fail"
            if "final_result" in server_result:
                server_result["final_result"] = server_result["final_result"] + "DHCLIENT,"
            else:
                server_result["final_result"] = "DHCLIENT,"
            print(" DHCLIENT Package        : Fail")
        else:
            server_result["DHCLIENT"] = "Pass"
            print(" DHCLIENT Package        : Pass")

    def _check_linux(self):
        _server_list = self._migration_factory_requester.get_user_servers_by_wave_and_os(
            filter_wave_name=self._arguments.wave_name, filter_os='linux')

        user_name = ''
        pass_key = ''
        has_key = ''

        results = []

        if len(_server_list) > 0:
            print("")
            print("********************************************")
            print("*Checking Pre-requisites for Linux servers*")
            print("********************************************")
            print("")

            user_name = self._arguments.linux_username if self._arguments.linux_username.lower().strip(
            ) != '' else EnvironmentVariableFetcher.fetch(env_var_names=mf.ENV_VAR_LINUX_USERNAME,
                                                          env_var_description='Linux username')
            has_key = self._arguments.linux_private_key_file.lower().strip() != ''
            if has_key:
                pass_key = self._arguments.linux_private_key_file
            else:
                pass_key = EnvironmentVariableFetcher.fetch(
                    env_var_names=mf.ENV_VAR_LINUX_PASSWORD, env_var_description='Linux password', sensitive=True)
        for server in _server_list:
            print("")
            print("---------------------------------------------------------")
            print("-- Linux Server result for " + server['server_name'] + " --")
            print("---------------------------------------------------------")
            print("")
            server_result = {}
            server_result["server_id"] = server[MfField.SERVER_ID]
            server_result["server_name"] = server[MfField.SERVER_NAME]
            server_result["final_result"] = ""

            # This checks network connectivity, if we can SSH to the source machine
            self._check_ssh_connectivity(server[MfField.SERVER_FQDN], user_name, pass_key, has_key, server_result)
            if "SSH22" not in server_result["final_result"]:
                # Check if the given user has sudo permissions
                self._check_sudo_permissions(server_result)
                if "SUDO" not in server_result["final_result"]:
                    # Check if user is able to access Internet and
                    # connect to https://console.cloudendure.com
                    self._check_tcp_connectivity('console.cloudendure.com', '443', server_result)

                    # Check if user is able to connect to TCP 1500
                    # for a specific IP (user provide IP address)
                    self._check_tcp_connectivity(self._arguments.cloudendure_server_ip, '1500', server_result)

                    # Check if root directory have more than 3GB free space
                    self._check_freespace('/', 3.0, server_result)

                    # Check if /tmp directory have more than 500MB free space
                    self._check_freespace('/tmp', 0.5, server_result)

                    # Check if dhclient package is installed.
                    self._check_dhclient(server_result)
            if "error" in server_result:
                print(server_result['error'])
            # Closing ssh connection
            if self._ssh_connexion is not None:
                self._ssh_connexion.close()
                self._ssh_connexion = None
            if "final_result" in server_result:
                final_result = server_result["final_result"]
                if len(final_result) > 1 and final_result[-1] == ',':
                    final_result = final_result[:-1]
                    server_result["final_result"] = final_result
            results.append(server_result)
        return results

    @classmethod
    def _open_ssh(cls, host, username, key_pwd, using_key):
        ssh = None
        error = ''
        try:
            if using_key:
                private_key = paramiko.RSAKey.from_private_key_file(key_pwd)
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(hostname=host, username=username, pkey=private_key)
            else:
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(hostname=host, username=username, password=key_pwd)
        except IOError as io_error:
            error = "Unable to connect to host " + host + " with username " + \
                    username + " due to " + str(io_error)
        except paramiko.SSHException as ssh_exception:
            error = "Unable to connect to host " + host + " with username " + \
                    username + " due to " + str(ssh_exception)
        return ssh, error

    def _print_results(self, label, results):
        print("------------------------------------------------------------")
        print("-- " + label + " server passed all Pre-requisites checks --")
        print("------------------------------------------------------------")
        print("")
        for result in results:
            if 'final_result' in result:
                if result['final_result'] == "":
                    if 'error' not in result:
                        print("     " + result['server_name'])
                        self._migration_factory_requester.put(MigrationFactoryRequester.URI_USER_SERVER.format(
                            result['server_id']),
                            data=json.dumps({"migration_status": "Pre-requisites check : Passed"}))

        print("")
        print("-------------------------------------------------------------")
        print("-- " + label + " server failed one or more Pre-requisites checks --")
        print("-------------------------------------------------------------")
        print("")
        for result in results:
            if 'final_result' not in result:
                print("     " + result[
                    'server_name'] + " : Unexpected error, please check error details")
                self._migration_factory_requester.put(MigrationFactoryRequester.URI_USER_SERVER.format(
                    result['server_id']),
                    data=json.dumps({"migration_status": "Pre-requisites check : Failed - Unexpected error"}))
            else:
                if 'error' in result and result['final_result'] == "":
                    print("     " + result[
                        'server_name'] + " : Unexpected error, please check error details")
                    self._migration_factory_requester.put(MigrationFactoryRequester.URI_USER_SERVER.format(
                        result['server_id']),
                        data=json.dumps({"migration_status": "Pre-requisites check : Failed - Unexpected error"}))
                if result['final_result'] != "":
                    print("     " + result['server_name'] + " : " + result['final_result'])
                    self._migration_factory_requester.put(
                        MigrationFactoryRequester.URI_USER_SERVER.format(result['server_id']), data=json.dumps({
                            "migration_status": "Pre-requisites check : Failed - " + result['final_result'] + " "}))
        print("")


if __name__ == '__main__':
    prerequisites_checker = PrerequisitesChecker()
    prerequisites_checker.check()
