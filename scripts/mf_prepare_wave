#!/usr/bin/env python3

import argparse
import logging
import os
from pathlib import Path
from shutil import copy2

import mf_library
from mf_library import DefaultsLoader
from mf_library import Utils
from mf_security_group_template import TemplateSecurityGroupCreator


class WavePreparator:
    """ Prepare Migration Factory wave """

    _arguments = []
    _defaults = {}
    _environments = []
    _path_wave = ''

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument(
            '--config-file-defaults',
            default=os.environ.get('MF_DEFAULTS_CONFIG_FILE', '/etc/migration_factory/defaults.yml'),
            help='Configuration file containing default IDs'
        )
        environment_arg = parser.add_argument('--environment', help='Environment of the wave')

        self._arguments = parser.parse_args()

        mf_library.setup_logging(self._arguments.v)
        defaults_loader = DefaultsLoader()
        self._defaults = defaults_loader.load(default_config_file=self._arguments.config_file_defaults,
                                              environment=self._arguments.environment)

        environment_arg.choices = defaults_loader.getAvailableEnvironments()

        self._arguments = parser.parse_args()

        Utils().check_is_serializable_as_path(self._arguments.wave_name)
        self._path_wave = os.path.join(mf_library.PATH_HOME, self._arguments.wave_name)

    def prepare(self):
        logging.debug(self._arguments)

        print('### Create folder structure…', end=' ')
        os.makedirs(os.path.join(self._path_wave, mf_library.DIRECTORY_POST_LAUNCH), exist_ok=True)
        print('✔ Done')

        print('### Copy .csv templates…', end=' ')
        copy2(os.path.join(mf_library.PATH_TEMPLATE, mf_library.FILE_CSV_WAVE_TEMPLATE), self._path_wave)
        copy2(os.path.join(mf_library.PATH_TEMPLATE, mf_library.FILE_CSV_INIT_WAVE_TEMPLATE), self._path_wave)
        print('✔ Done')

        template_sg_creator = TemplateSecurityGroupCreator()
        sg_template_copy = template_sg_creator.create()
        sg_template_copy_testing = template_sg_creator.create_for_testing()

        print('### Pre-fill .csv templates…', end=' ')
        with open(os.path.join(self._path_wave, mf_library.FILE_CSV_WAVE_TEMPLATE), 'a') as file_object:
            file_object.write(','.join([
                self._arguments.wave_name,
                'SET_APP_NAME_VALUE',
                self._arguments.wave_name,
                str(self._defaults['account_id']),
                'SET_SERVERNAME',
                'SET_SERVEROS',
                'SET_SERVEROS_VERSION',
                'SET_SERVER_FQDN',
                'app',
                self._arguments.environment,
                self._defaults['target_subnet_id'],
                ';'.join(self._defaults['target_security_group_ids'], sg_template_copy),
                self._defaults['test_subnet_id'],
                ';'.join(self._defaults['test_security_group_ids'], sg_template_copy_testing),
                'SET_INSTANCE_TYPE',
                'Shared',
                self._defaults['iam_role'],
            ]))
        print('✔ Done')

        print('### Add marker…', end=' ')
        Path(os.path.join(self._path_wave, mf_library.FILE_DONE_MARKER)).touch()
        print('✔ Done')


if __name__ == '__main__':
    wave_preparator = WavePreparator()
    wave_preparator.prepare()
