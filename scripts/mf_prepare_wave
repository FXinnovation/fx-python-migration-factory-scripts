#!/usr/bin/env python3

import argparse
import base64
import json
import logging
import os
import pathlib
import sys
from pathlib import Path
from shutil import copy2

import mf
from mf.cloud_endure import CloudEndureRequester
from mf.config_loaders import DefaultsLoader
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester
from mf.utils import EnvironmentVariableFetcher
from mf.utils import Utils
from mf_security_group_template import TemplateSecurityGroupCreator


class WavePreparator:
    """ Prepare Migration Factory wave """

    _arguments = []
    _defaults = {}
    _endpoints = {}
    _migration_factory_requester = None
    _cloud_endure_requester = None
    _environments = []
    _path_wave = ''

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument(
            '--config-file-defaults',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_DEFAULTS_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_DEFAULTS_CONFIG_FILE
            ),
            help='Configuration file containing default IDs'
        )
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        environment_arg = parser.add_argument('--environment', help='Environment of the wave')

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)
        defaults_loader = DefaultsLoader()
        self._defaults = defaults_loader.load(
            default_config_file=self._arguments.config_file_defaults,
            environment=self._arguments.environment
        )

        environment_arg.choices = defaults_loader.get_available_environments()

        self._arguments = parser.parse_args()

        Utils.check_is_serializable_as_path(self._arguments.wave_name)
        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)
        self._endpoints = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints).load()
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints[MigrationFactoryRequester.KEY_LOGIN_API_URL]
        )
        self._cloud_endure_requester = CloudEndureRequester()

    def prepare(self):
        logging.getLogger('root').debug(self._arguments)

        self._check_marker()

        self._create_cloud_endure_project()
        self._create_migration_factory_project()
        self._create_folder_structure()
        self._copy_csv_templates()

        template_sg_creator = TemplateSecurityGroupCreator()
        sg_template_copy_id = template_sg_creator.create()
        sg_template_copy_testing_id = template_sg_creator.create_for_testing()

        self._prefill_csv_tempates(sg_template_copy_id, sg_template_copy_testing_id)
        self._add_marker()

    def _check_marker(self):
        if Path(os.path.join(self._path_wave, mf.FILE_MARKER_PREPARE_DONE)).exists():
            print('✔ Already Done')
            exit(0)

    def _add_marker(self):
        print('### Add marker…', end=' ')
        Path(os.path.join(self._path_wave, mf.FILE_MARKER_PREPARE_DONE)).touch()
        print('✔ Done')

    def _create_folder_structure(self):
        print('### Create folder structure…', end=' ')
        if not pathlib.Path(os.path.join(self._path_wave, mf.DIRECTORY_POST_LAUNCH)).exists():
            os.makedirs(os.path.join(self._path_wave, mf.DIRECTORY_POST_LAUNCH), exist_ok=True)
            print('✔ Done')
        else:
            print('✔ Already Done')

    def _copy_csv_templates(self):
        print('### Copy .csv templates…', end=' ')
        if not pathlib.Path(os.path.join(self._path_wave, mf.FILE_CSV_WAVE_TEMPLATE)).exists():
            copy2(os.path.join(mf.PATH_TEMPLATE, mf.FILE_CSV_WAVE_TEMPLATE), self._path_wave)
            print('✔ Done')
        else:
            print('✔ Already Done')

    def _prefill_csv_tempates(self, sg_template_copy_id, sg_template_copy_testing_id):
        print('### Pre-fill .csv templates…', end=' ')

        with open(os.path.join(self._path_wave, mf.FILE_CSV_WAVE_TEMPLATE), 'a') as file_object:
            file_object.write(','.join([
                self._arguments.wave_name,
                'SET_APP_NAME_VALUE',
                self._arguments.wave_name,
                str(self._defaults.get('account_id', 'SET_ACCOUNT_ID')),
                'SET_SERVERNAME',
                self._defaults.get('server_os', 'SET_SERVEROS'),
                'SET_SERVEROS_VERSION',
                'SET_SERVER_FQDN',
                'app',
                self._arguments.environment,
                self._defaults.get('target_subnet_id', 'SET_TARGET_SUBNET_ID'),
                ';'.join(list(
                    x for x in (self._defaults.get('target_security_group_ids', []) + [sg_template_copy_id]) if
                    x is None
                )),
                self._defaults.get('test_subnet_id', 'SET_TEST_SUBNET_ID'),
                ';'.join(list(
                    x for x in (self._defaults.get('test_security_group_ids', []) + [sg_template_copy_testing_id]) if
                    x is None
                )),
                self._defaults.get('instance_type', 'SET_INSTANCE_TYPE'),
                self._defaults.get('tenancy', 'Shared'),
                self._defaults.get('iam_role', 'SET_IAM_ROLE'),
            ]))
        print('✔ Done')

    def _create_migration_factory_project(self):
        print('### Create Migration Factory Project…', end=' ')

        app_schema = self._migration_factory_requester.get(
            url=self._endpoints[MigrationFactoryRequester.KEY_ADMIN_API_URL],
            uri='/prod/admin/schema/app'
        )

        logging.getLogger('root').debug(self.__class__.__name__ + ':app_schema:' + str(app_schema))

        attribute_description = None
        attribute_type = None

        for app in app_schema['attributes']:
            if app['name'] == 'cloudendure_projectname':
                attribute_description = app['description']
                attribute_type = app['type']
                break

        data = {
            "event": "PUT",
            "name": "cloudendure_projectname",
            "update": {
                "name": "cloudendure_projectname",
                "description": attribute_description,
                "type": attribute_type,
                "listvalue": ','.join('TEST_SHOULD_BE_PROJECTS')
            }
        }

        logging.getLogger('root').debug(self.__class__.__name__ + ':data:' + str(data))

        response = self._migration_factory_requester.put(
            url=self._endpoints[MigrationFactoryRequester.KEY_ADMIN_API_URL],
            uri='/prod/admin/schema/app',
            data=data
        )
        logging.getLogger('root').debug(self.__class__.__name__ + ':response:' + str(response))

        if response.status_code == 200:
            logging.getLogger('root').debug(
                self.__class__.__name__ + ':migration_factory_project:Successfully updated Migration Factory projects')
        else:
            logging.getLogger('root').error(
                self.__class__.__name__ + ':migration_factory_project:Error when updating Migration Factory projects')
            sys.exit(1)

        print('✔ Done')

    def _create_cloud_endure_project(self):
        print('### Create CloudEndure Project…')

        print('####### Create Project…', end=' ')

        project = self._cloud_endure_requester.get_project_by_name(self._arguments.wave_name)

        if project is False:
            project_data = {
                'name': self._arguments.wave_name,
                'type': 'MIGRATION',
                'licensesIDs': [self._cloud_endure_requester.get_migration_license()],
                'targetCloudId': self._cloud_endure_requester.get_aws_cloud_id(),
                'sourceRegion': self._cloud_endure_requester.get_on_prem_region_id()
            }
            project = self._cloud_endure_requester.post(uri='projects', data=project_data)
            print('✔ Done')
        else:
            print('✔ Already Done')

        print('####### Setup Cloud Credentials…', end=' ')
        if not project['cloudCredentialsIDs']:
            credentials_data = {
                'publicKey': EnvironmentVariableFetcher.fetch(mf.ENV_VAR_AWS_ACCESS_KEY_NAMES),
                'privateKey': base64.b64encode(
                    EnvironmentVariableFetcher.fetch(
                        mf.ENV_VAR_AWS_SECRET_KEY_NAMES, sensitive=True
                    ).encode('utf-8')).decode('utf-8'),
                'cloudId': self._cloud_endure_requester.get_aws_cloud_id()
            }
            cloud_credentials_id = self._cloud_endure_requester.post(uri='cloudCredentials', data=credentials_data)['id']

            data = {
                'cloudCredentialsIDs': [cloud_credentials_id]
            }
            self._cloud_endure_requester.patch(uri='projects/{}'.format(project['id']), data=data)

            print('✔ Done')
        else:
            cloud_credentials_id = project['cloudCredentialsIDs'][0]
            print('✔ Already Done')

        print('####### Setup Configuration…', end=' ')

        if 'replicationConfiguration' not in project.keys():
            region_id = self._cloud_endure_requester.get_aws_region_id(
                cloud_credentials_id, EnvironmentVariableFetcher.fetch(mf.ENV_VAR_AWS_REGION_NAMES)
            )

            project_replication_config = {
                'volumeEncryptionKey': '',
                'volumeEncryptionAllowed': True,
                'bandwidthThrottling': self._defaults.get('replication_bandwidth_throttling', 0),
                'disablePublicIp': self._defaults.get('replication_disable_public', True),
                'replicationServerType': self._defaults.get('replication_instance_type', 'm5.large'),
                'useLowCostDisks': False,
                'useDedicatedServer': False,
                'usePrivateIp': self._defaults.get('replication_disable_public', True),
                'replicatorSecurityGroupIDs': [],
                'proxyUrl': '',
                'storageLocationId': '',
                'objectStorageLocation': '',
                'archivingEnabled': False,
                'replicationTags': [{'key': 'CloudEndureProject', 'value': self._arguments.wave_name}],
                'subnetId': self._defaults.get('replication_subnet_id'),
                'cloudCredentials': cloud_credentials_id,
                'region': region_id,
                'converterType': self._defaults.get('replication_converter_instance_type', 'm5.large'),
            }

            replication_configuration_id = self._cloud_endure_requester.post(
                uri='projects/{}/replicationConfigurations'.format(project['id']),
                data=project_replication_config
            )['id']

            data = {
                'replicationConfiguration': replication_configuration_id
            }

            self._cloud_endure_requester.patch(uri='projects/{}'.format(project['id']), data=data)

            print('✔ Done')
        else:
            print('✔ Already Done')


if __name__ == '__main__':
    wave_preparator = WavePreparator()
    wave_preparator.prepare()

    # create a region dictionary

# def PutCloudEndureProject(projects, token):
#     migration_factory_requester.get(AdminHOST, '/prod/admin/schema/app')
#
#     apps = json.loads(requests.get(AdminHOST, headers={"Authorization": token}).text)
#
#     attribute_description = None
#     attribute_type = None
#
#     for app in apps['attributes']:
#         if app['name'] == 'cloudendure_projectname':
#             attribute_description = app['description']
#             attribute_type = app['type']
#             break
#
#     assert attribute_type
#     assert attribute_description
#
#     data = {
#         "event": "PUT",
#         "name": "cloudendure_projectname",
#         "update": {
#             "name": "cloudendure_projectname",
#             "description": attribute_description,
#             "type": attribute_type,
#             "listvalue": ','.join(projects)
#         }
#     }
#     r = requests.put(AdminHOST + '/prod/admin/schema/app', headers=auth, data=json.dumps(data))
#     if r.status_code == 200:
#         print("Cloudendure project are updated in the migration factory")
#     else:
#         print("Cloud endure project update failed: " + r.text + ".......")
#
# except:
# print("ERROR: Getting server list failed....")
# sys.exit(6)
#
#
# def main():

#
#             # attach configuration to the project

#

#             resp = session.get(url=HOST + endpoint.format('/projects'))
#
#             if rep.status_code != 200:
#                 print('Failed to get cloud endure project'.format(rep.status_code))
#             else:
#                 cloudendure_projects = []
#                 for project in json.loads(resp.content)['items']:
#                     cloudendure_projects.append(project['name'])
#
#                 PutCloudEndureProject(cloudendure_projects, token)
#
#
# return 0
