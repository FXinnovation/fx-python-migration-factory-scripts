#!/usr/bin/env python3

import argparse
import os
import logging, sys
from pathlib import Path
from shutil import copy2
import yaml
import re
from mf_library import DefaultsLoader


class WavePreparator:
    """ Prepare Migration Factory wave """

    PATH_HOME=os.path.join(str(Path.home()), 'migration')
    PATH_TEMPLATE=os.path.join(PATH_HOME, 'templates')

    FILE_CSV_WAVE_TEMPLATE=os.path.join(PATH_TEMPLATE, 'migration-intake-form.csv')
    FILE_CSV_INIT_WAVE_TEMPLATE=os.path.join(PATH_TEMPLATE, 'migration-intake-form-init.csv')
    FILE_DONE_MARKER='.mf_done'

    DIRECTORY_POST_LAUNCH='post-launch'

    _arguments = []
    _defaults = {}
    _environments = []
    _path_wave = ''

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument('--config-file-defaults', default=os.environ.get('MF_DEFAULTS_CONFIG_FILE', '/etc/migration_factory/defaults.yml'), help='Configuration file containing default IDs')
        environment_arg = parser.add_argument('--environment', help='Environment of the wave')

        self._arguments = parser.parse_args()
        self._define_logging_level()

        self._load_defaults()

        environment_arg.choices = (self._environments)

        self._arguments = parser.parse_args()

        self._check_is_serializable_as_path(self._arguments.wave_name)
        self._path_wave = os.path.join(self.PATH_HOME, self._arguments.wave_name)

    def prepare(self):
        logging.debug(self._arguments)

        print('### Create folder structure…', end=' ')
        os.makedirs(os.path.join(self._path_wave, self.DIRECTORY_POST_LAUNCH), exist_ok=True)
        print('✔ Done')

        print('### Copy .csv templates…', end=' ')
        copy2(self.FILE_CSV_WAVE_TEMPLATE, self._path_wave)
        copy2(self.FILE_CSV_INIT_WAVE_TEMPLATE, self._path_wave)
        print('✔ Done')

        print('### Pre-fill .csv templates…', end=' ')
        with open(os.path.join(self._path_wave, self.FILE_CSV_WAVE_TEMPLATE), 'a') as file_object:
            file_object.write(','.join([
                self._arguments.wave_name,
                'SET_APP_NAME_VALUE',
                self._arguments.wave_name,
                self._defaults.account_id,
                'SET_SERVERNAME',
                'SET_SERVEROS',
                'SET_SERVEROS_VERSION',
                'SET_SERVER_FQDN',
                'app',
                self._defaults.subnet_id,
                self._defaults.security_group_id,
                self._defaults.test_subnet_id,
                self._defaults.test_security_group_ids,
                'SET_INSTANCE_TYPE',
                'SharedORDedicatedORDedicated Host',
            ]))
        print('✔ Done')

        print('### Add marker…', end=' ')
        Path(os.path.join(self._path_wave, self.FILE_DONE_MARKER)).touch()
        print('✔ Done')

    def _load_defaults(self):
        with open(self._arguments.config_file_defaults, 'r') as stream:
            try:
                all_defaults = yaml.safe_load(stream)
                self._defaults = all_defaults[self._arguments.environment]
                logging.debug(self._defaults)

                for environment, defaults in all_defaults.items():
                    self._check_is_serializable_as_path(environment)
                    self._environments.append(environment)
            except yaml.YAMLError as exception:
                logging.error(exception)

    def _define_logging_level(self):
        if self._arguments.v is True:
            logging_level = logging.DEBUG
        else:
            logging_level = logging.INFO

        logging.basicConfig(stream=sys.stderr, level=logging_level)

    def _check_is_serializable_as_path(self, string_to_test):
        is_serializable_as_path = re.search("^[a-z0-9]+$", string_to_test)
        if not is_serializable_as_path:
            logging.warning('The string “'+string_to_test+'” will need to be serialized for a path or a filename. It might not be suitable because it contains special characters. Use at your own risk.')
        return bool(is_serializable_as_path)

if __name__ == '__main__':
    wave_preparator = WavePreparator()
    wave_preparator.prepare()
