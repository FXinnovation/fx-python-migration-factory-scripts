#!/usr/bin/env python3

import argparse
import base64
import json
import logging
import os
import pathlib
import sys
from pathlib import Path
from shutil import copy2

import mf
from mf.cloud_endure import CloudEndureRequester
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester
from mf.utils import EnvironmentVariableFetcher
from mf.utils import Utils
from mf_security_group_template import TemplateSecurityGroupCreator


class WaveDelete:
    """ Delete Migration Factory wave """

    _arguments = []
    _endpoints = {}
    _migration_factory_requester = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-id', required=True, help='ID of the wave to prepare')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints).load()
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints[MigrationFactoryRequester.KEY_LOGIN_API_URL]
        )
        self._cloud_endure_requester = CloudEndureRequester()

    def delete_mf(self):
        print('### Delete Migration Factory Project…', end=' ')
        
        _app_ids = get_user_app_ids(
                user_api_url = self._endpoints[MigrationFactoryRequester.KEY_USER_API_URL],
                wave_id = self._arguments["wave-id"]
            )

        _server_ids = []

        for app_id in app_ids:
            _server_ids += self._migration_factory_requester.get_user_server_ids(
                user_api_url = self._endpoints[MigrationFactoryRequester.KEY_USER_API_URL], 
                app_id = app_id
        )

        for server_id in _server_ids:
            self._migration_factory_requester.delete(
                url=self._endpoints[MigrationFactoryRequester.KEY_USER_API_URL],
                uri=format(MigrationFactoryRequester.URI_USER_SERVER, server_id),
            )

        for app_id in _app_ids:
            self._migration_factory_requester.delete(
                url=self._endpoints[MigrationFactoryRequester.KEY_USER_API_URL],
                uri=format(MigrationFactoryRequester.URI_USER_APP, app_id),
            )

        self._migration_factory_requester.delete(
                url=self._endpoints[MigrationFactoryRequester.KEY_USER_API_URL],
                uri=format(MigrationFactoryRequester.URI_USER_WAVE, self._arguments["wave-id"]),
            )

        print('✔ Done')


if __name__ == '__main__':
    wave_deletion = WaveDelete()
    wave_deletion.delete_mf()
    #wave_deletion.delete_ce()
