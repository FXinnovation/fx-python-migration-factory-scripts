#!/usr/bin/env python3

import argparse
import logging

import mf
from mf.cloud_endure import CloudEndureRequester
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester
from mf.utils import EnvironmentVariableFetcher
from mf.utils import Requester


class WaveDeleter:
    """ Delete Migration Factory wave """

    _arguments = []
    _endpoints_loader = {}
    _migration_factory_requester = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-id', required=True, help='ID of the wave to delete')
        parser.add_argument('--cloudendure-project-name', required=True,
                            help='ID of the cloud endure project to delete')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._cloud_endure_requester = CloudEndureRequester()

    def delete_mf(self):
        print('### Delete Migration Factory Project…', end=' ')

        _app_ids = self._migration_factory_requester.get_user_app_ids(
            filter_wave_id=self._arguments.wave_id
        )

        logging.getLogger('root').info('{}: app id “{}” are selected for deletion)'.format(
            self.__class__.__name__, _app_ids
        ))

        _server_ids = []

        for app_id in _app_ids:
            _server_ids += self._migration_factory_requester.get_user_server_ids(
                filter_app_id=app_id
            )

        logging.getLogger('root').info('{}: server id “{}” are selected for deletion)'.format(
            self.__class__.__name__, _server_ids
        ))

        for server_id in _server_ids:
            self._migration_factory_requester.delete(
                uri=MigrationFactoryRequester.URI_USER_SERVER.format(server_id),
                response_type=Requester.RESPONSE_TYPE_RAW,
            )

        for app_id in _app_ids:
            self._migration_factory_requester.delete(
                uri=MigrationFactoryRequester.URI_USER_APP.format(app_id),
                response_type=Requester.RESPONSE_TYPE_RAW,
            )

        self._migration_factory_requester.delete(
            uri=MigrationFactoryRequester.URI_USER_WAVE.format(self._arguments.wave_id),
            response_type=Requester.RESPONSE_TYPE_RAW,
        )

        print('✔ Done')

    def delete_ce_project(self):
        print('### Delete CloudEndure Project…', end=' ')

        _cloud_endure_project = self._cloud_endure_requester.get_project_by_name(
            self._arguments.cloudendure_project_name)

        if not _cloud_endure_project:
            print('✔ Already deleted')
            return

        self._cloud_endure_requester.delete(CloudEndureRequester.URI_PROJECT.format(_cloud_endure_project["id"]))

        print('✔ Done')


if __name__ == '__main__':
    wave_deletion = WaveDeleter()
    wave_deletion.delete_mf()
    wave_deletion.delete_ce_project()
