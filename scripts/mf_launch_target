#!/usr/bin/env python3

import argparse
import logging
import os
import json
import sys
import requests

import mf
from mf.utils import Utils
from mf.utils import EnvironmentVariableFetcher, UserManualConfirmation
from mf.config_loaders import EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester, MfField


class TargetInstanceLauncher:
    """ Launch target instances """

    _arguments = []
    _environment_variable_fetcher = None
    _endpoints_loader = None
    _migration_factory_requester = None
    _ce_api_token = ""

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable debug outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to act on')
        parser.add_argument('--dry-run', action='store_true', help='Run in dry-run mode')
        parser.add_argument('--cutover', action='store_true', help='Perform a cutover. WARNING!! This can affect your production!')
        parser.add_argument('--relaunch', action='store_true', help='Relaunch the target even if it was already launch')
        parser.add_argument('-y', action='store_true', help='Auto confirm dangerous action')
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)

        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )

        self._ce_api_token = EnvironmentVariableFetcher.fetch(
            env_var_names=mf.ENV_VAR_CLOUDENDURE_TOKEN, env_var_description='CloudEndure API token'
        )

    def is_cutover(self):
        return self._arguments.cutover

    def launch_test(self):
        if not self._arguments.dry_run:
           logging.getLogger('root').info(self._migration_factory_requester.launch_target(self._arguments.wave_name, self._ce_api_token, dry_run=True, for_testing=True))

        print(self._migration_factory_requester.launch_target(self._arguments.wave_name, self._ce_api_token, self._arguments.dry_run, True, relaunch=self._arguments.relaunch))

    def launch_cutover(self):
        if not self._arguments.dry_run:
           logging.getLogger('root').info(self._migration_factory_requester.launch_target(self._arguments.wave_name, self._ce_api_token, dry_run=True, for_testing=False))

        if self._arguments.y or UserManualConfirmation.ask("You are about to deploy machines that may affect production systems. Do you want to continue?", "continue"):
            print(self._migration_factory_requester.launch_target(self._arguments.wave_name, self._ce_api_token, dry_run=self._arguments.dry_run, for_testing=False, relaunch=self._arguments.relaunch))

        print("Aborted by user. Nothing was done")


if __name__ == '__main__':
    target_instance_launcher = TargetInstanceLauncher()

    if target_instance_launcher.is_cutover():
        target_instance_launcher.launch_cutover()
        sys.exit(0)

    target_instance_launcher.launch_test()
