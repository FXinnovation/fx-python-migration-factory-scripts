#!/usr/bin/env python3

import argparse
import logging
import os

import mf
from mf.config_loaders import DefaultsLoader, EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester
from mf.utils import EnvironmentVariableFetcher, MessageBag, Utils


class TagsImporter:
    """Import tags to MF"""

    _arguments = []
    _endpoints_loader = None
    _migration_factory_requester = None
    _path_wave = ''
    _csv_content = []

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument(
            '--config-file-defaults',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_DEFAULTS_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_DEFAULTS_CONFIG_FILE
            ),
            help='Configuration file containing default IDs'
        )

        self._arguments = parser.parse_args()

        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)
        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(self._endpoints_loader)

        logging.getLogger('root').debug(self._arguments)

    def read_tags_csv(self):
        if not self._csv_content:
            self._csv_content = Utils.csv_to_dicts(os.path.join(self._path_wave, mf.FILE_CSV_TAG))

        return self._csv_content

if __name__ == '__main__':
    tags_importer = TagsImporter()
    print(tags_importer.read_tags_csv())


#serverendpoint = '/prod/user/servers'
#def data_validation(data, servers):
#    # Validate if Name column exist
#    keys = data[0].keys()
#    if "Name" not in keys:
#        print ("ERROR: 'Name' column is mandatory")
#        sys.exit(3)
#    # check if none value exist
#    for row in data:
#        for key in keys:
#            if key not in row:
#               print("ERROR: "+ key + " tag value is missing for server " + row['Name'])
#               sys.exit(4)
#            if row[key] == None:
#               print("ERROR: "+ key + " tag value is missing for server " + row['Name'])
#               sys.exit(6)
#            if row[key] == row[key].strip() == "":
#               print("ERROR: "+ key + " tag for server " + row['Name'] + " is empty")
#               sys.exit(7)
#    # Validate duplicate server names in csv file
#    server_list = []
#    for row in data:
#        if row['Name'].strip().lower() not in server_list:
#            server_list.append(str(row['Name']).strip().lower())
#        else:
#            print("ERROR: Duplicated Server Name: " + row['Name'])
#            sys.exit(2)
#    # Check if server exist in the migration factory
#    for server in server_list:
#        match = False
#        for s in servers:
#            if (server.lower() == s['server_name'].lower()):
#                match = True
#        if (match == False):
#            print("ERROR: Server " + server + " doesn't exist in the migration factory")
#            sys.exit(1)
#
#
#def uploading_data(data, token):
#    keys = data[0].keys()
#    auth = {"Authorization": token}
#    servers = json.loads(requests.get(UserHOST + serverendpoint, headers=auth).text)
#    data_validation(data, servers)
#    for row in data:
#        update_server_tags = {}
#        tags = []
#        server_id = ""
#        for server in servers:
#            if row['Name'].strip().lower() == server['server_name'].strip().lower():
#                server_id = server["server_id"]
#                for key in keys:
#                    tag = {}
#                    tag['key'] = key
#                    tag['value'] = row[key].strip()
#                    tags.append(tag)
#        update_server_tags['tags'] = tags
#        r = requests.put(UserHOST + serverendpoint + '/' + server_id, headers=auth, data=json.dumps(update_server_tags))
#        if r.status_code == 200:
#           print("Tags for server " + row['Name'] + " updated in the migration factory")
#        else:
#           print("ERROR: updating tags for server " + row['Name'] + " failed : " + r.text + ".......")
#
#    data = get_reader(args.Intakeform)
#    r = uploading_data(data,token)
