#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import json

import mf
from mf.config_loaders import DefaultsLoader, EndpointsLoader
from mf.migration_factory import MigrationFactoryRequester, MfField
from mf.utils import EnvironmentVariableFetcher, MessageBag, Utils


class TagsImporter:
    """Import tags to MF"""

    TAG_NAME = "Name"

    MANDATORY_TAGS = [TAG_NAME]

    _arguments = []
    _endpoints_loader = None
    _migration_factory_requester = None
    _path_wave = ''
    _csv_content = []

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument(
             '--config-file-endpoints',
             default=EnvironmentVariableFetcher.fetch(
                 env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                 default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
             ),
             help='Configuration file containing the Migration Factory endpoint URLs'
         )

        self._arguments = parser.parse_args()

        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)
        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(self._endpoints_loader)

        logging.getLogger('root').debug(self._arguments)

    def _read_tags_csv(self):
        if not self._csv_content:
            self._csv_content = Utils.csv_to_dicts(os.path.join(self._path_wave, mf.FILE_CSV_TAG))

        return self._csv_content

    def _verify_mandatory_field(self):
        print('### Verify mandatory tags… ', end=' ')
        for server in self._read_tags_csv():
            for mandatory_tag in self.MANDATORY_TAGS:
                if  mandatory_tag not in server.keys():
                    logging.getLogger('root').error("{}: The key “{}” is mandatory".format(self.__class__.__name__, mandatory_tag))
                    sys.exit(10)
                if not server[mandatory_tag]:
                    logging.getLogger('root').error("{}:The key “{}” must be filled".format(self.__class__.__name__, mandatory_tag))
                    sys.exit(11)
        print('✔ Done')

    def _verify_duplicated_entries(self):
        print('### Verify duplicated entries… ', end=' ')
        _servers = []
        for server in self._read_tags_csv():
            if server[self.TAG_NAME].strip().lower() in _servers:
                logging.getLogger('root').error("{}: The server {} is duplicated".format(self.__class__.__name__, server[self.TAG_NAME].strip().lower()))
                sys.exit(12)

            _servers.append(server[self.TAG_NAME].strip().lower())
        print('✔ Done')

    def _prepare(self):
        self._verify_mandatory_field()
        self._verify_duplicated_entries()

    def update_servers_tags(self):
        self._prepare()

        for server_tags in self._read_tags_csv():
            print('### Update tags on server “{}”… '.format(server_tags[self.TAG_NAME].strip()), end=' ')
            server_id = self._migration_factory_requester.get_user_server_by_name(server_tags[self.TAG_NAME].strip())[MfField.SERVER_ID]
            tags = []
            for server_tag in server_tags:
                if server_tags[server_tag].strip() != '':
                    tag = {}
                    tag["key"] = server_tag.strip()
                    tag["value"] = server_tags[server_tag].strip()
                    tags.append(tag)

            self._migration_factory_requester.put(MigrationFactoryRequester.URI_USER_SERVER.format(server_id), data=json.dumps({"tags": tags}))
            print('✔ Done')


if __name__ == '__main__':
    tags_importer = TagsImporter()
    tags_importer.update_servers_tags()
