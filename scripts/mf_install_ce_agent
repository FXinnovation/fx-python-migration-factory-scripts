#!/usr/bin/env python3

from __future__ import print_function
import sys
import argparse
import requests
import json
import subprocess
import getpass
import time
import os

import mf
from mf.notification import Notifier
from mf.utils import EnvironmentVariableFetcher
from mf.config_loaders import EndpointsLoader, ConfigLoader

linuxpkg = __import__("mf_install_linux_package")

class CeAgentInstaller:


    _path = None
    _domain_password = None
    _cloud_endure_requester = None
    _migration_factory_requester = None
    _endpoints_loader = None
    _aws_service_accessor = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to delete')
        parser.add_argument('--windows-username', default =
            EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
                default=''
            ),
            help= "The windows username"
        )
        parser.add_argument('--linux-username', default =
            EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_USERNAME,
                default=''
            ),
            help= "The windows username"
        )
        parser.add_argument('--linux-private-key-file', default =
            EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_PRIVATE_KEY_FILE,
                default=''
            ),
            help= "The windows username"
        )
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._cloud_endure_requester = CloudEndureRequester()

        self._aws_service_accessor = AWSServiceAccessor()

        if self._has_windows_user():
            self._domain_password = EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD,
                env_var_description='Windows password',
                default='',
                sensitive=True
            )

        _path = os.path.dirname(os.path.abspath(__file__))

    def install_agent(self):
        self._install_windows_agent()
        self._install_linux_agent()

    def _install_windows_agent(self):
        print('### Install Windows CloudEndure agent…', end=' ')

        _server_list = self._migration_factory_requester.get_user_servers_by_wave_and_os(filter_wave_name = self._arguments.wave_name, filter_os = 'windows')

        if _server_list is None:
            print('✔ No Windows server in this wave. Nothing to do')

        _api_tokens = self._get_api_tokens()

        if _api_tokens is None:
            return

        for server in _server_list:
            install_command = '/mf_install_windows.ps1 "No" "' + _api_tokens[server[MfField.APP_ID]] + '" "' + server[MfField.SERVER_FQDN] + '"'

            if self._has_windows_user():
                create_path_command = PowershellRunner.authenticate_command(
                    create_path_command,
                    self._arguments.windows_user,
                    self._domain_password
                )

            logging.getLogger('root').info(
                self.__class__.__name__ + ':Running “{}”'.format(command)
            )

            PowershellRunner.run(create_path_command)

            print('✔ done.')

    def _install_linux_agent(self):
        print('### Install Linux CloudEndure agent…', end=' ')

        _server_list = self._migration_factory_requester.get_user_servers_by_wave_and_os(filter_wave_name = self._arguments.wave_name, filter_os = 'windows')

        if _server_list is None:
            print('✔ No Linux server in this wave. Nothing to do')

        _api_tokens = self._get_api_tokens()

        if _api_tokens is None:
            return

        for server in _server_list:
            linuxpkg.install_cloud_endure(server['server_fqdn'], user_name, pass_key, has_key in 'y', project['InstallToken'])

    def _get_api_tokens(self):
        _apps = self._migration_factory_requester.get_user_apps_by_wave_name(wave_name = self._arguments.wave_name)

        if _apps is None:
            logging.getLogger('root').info('{}: wave “{}” don\'t have cloudendure project)'.format(
                self.__class__.__name__, self._arguments.wave_name
            ))
            return None

        _installation_token_by_app_id = {}

        for app in _apps:
            if MfField.CLOUDENDURE_PROJECT_NAME not in app:
                logging.getLogger('root').info('{}: app “{}” don\'t have cloudendure project)'.format(
                    self.__class__.__name__, app[MfField.APP_NAME]
                ))
                continue

           _installation_token_by_app_id[MfField.APP_ID] = self._cloud_endure_requester.get_api_token(project_name = app[MfField.CLOUDENDURE_PROJECT_NAME])

        return _installation_token_by_app_id

    def _has_windows_user(self):
        return self._arguments.windows_username != ""


def AgentCheck(projects, token, UserHOST):
    auth = {"Authorization": token}
    success_servers = []
    failed_servers = []
    for project in projects:
        project_id = GetCEProject(project['ProjectName'])
        m = requests.get(HOST + endpoint.format('projects/{}/machines').format(project_id), headers=headers, cookies=session)
        if len(project['Windows']) > 0:
            for w in project['Windows']:
                machine_exist = False
                serverattr = {}
                for machine in json.loads(m.text)["items"]:
                    if w["server_name"].lower() == machine['sourceProperties']['name'].lower() or w["server_fqdn"].lower() == machine['sourceProperties']['name'].lower():
                        machine_exist = True
                if machine_exist == True:
                    success_servers.append(w['server_fqdn'])
                    serverattr = {"migration_status": "CE Agent Install - Success"}
                else:
                    failed_servers.append(w['server_fqdn'])
                    serverattr = {"migration_status": "CE Agent Install - Failed"}
                update_w = requests.put(UserHOST + serverendpoint + '/' + w['server_id'], headers=auth, data=json.dumps(serverattr))
        if len(project['Linux']) > 0:
            for li in project['Linux']:
                serverattr = {}
                machine_exist = False
                serverattr = {}
                for machine in json.loads(m.text)["items"]:
                    if li["server_name"].lower() == machine['sourceProperties']['name'].lower() or li["server_fqdn"].lower() == machine['sourceProperties']['name'].lower():
                        machine_exist = True
                if machine_exist == True:
                    success_servers.append(li['server_fqdn'])
                    serverattr = {"migration_status": "CE Agent Install - Success"}
                else:
                    failed_servers.append(li['server_fqdn'])
                    serverattr = {"migration_status": "CE Agent Install - Failed"}
                update_l = requests.put(UserHOST + serverendpoint + '/' + li['server_id'], headers=auth, data=json.dumps(serverattr))
    if len(success_servers) > 0:
        print("***** CE Agent installed successfully on the following servers *****")
        for s in success_servers:
            print("  " + s)
        print("")
    if len(failed_servers) > 0:
        print("##### CE Agent install failed on the following servers #####")
        for s in failed_servers:
            print("  " + s)

def main(arguments):
    AgentCheck(Projects,token, UserHOST)

    config_loader = ConfigLoader()
    notifier = Notifier(config_loader.get_notifications_config())
    notifier.notify(Notifier.AGENT_INSTALLED, Notifier.AGENT_INSTALLED_MESSAGE.format(project['ProjectName']))


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
