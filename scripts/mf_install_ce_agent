#!/usr/bin/env python3

from __future__ import print_function
from time import sleep
from math import ceil

import sys
import argparse
import requests
import json
import subprocess
import getpass
import time
import os

import mf
from mf.notification import Notifier
from mf.utils import EnvironmentVariableFetcher
from mf.config_loaders import EndpointsLoader, ConfigLoader

import mf_install_linux_package

class CeAgentInstaller:


    _path = None
    _domain_password = None
    _cloud_endure_requester = None
    _migration_factory_requester = None
    _endpoints_loader = None
    _aws_service_accessor = None
    _config_loader = None
    _notifier = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable info outputs')
        parser.add_argument('-vv', action='store_true', help='Enable debug outputs')
        parser.add_argument('--notify', action='store_true', help='Whether or not to notify the results')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to delete')
        parser.add_argument('--windows-username', default =
            EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_USERNAME,
                default=''
            ),
            help= "The windows username"
        )
        parser.add_argument('--linux-username', default =
            EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_USERNAME,
                default=''
            ),
            help= "The windows username"
        )
        parser.add_argument('--linux-private-key-file', default =
            EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_LINUX_PRIVATE_KEY_FILE,
                default=''
            ),
            help= "The windows username"
        )
        parser.add_argument(
            '--config-file-endpoints',
            default=EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
                default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
            ),
            help='Configuration file containing the Migration Factory endpoint URLs'
        )

        self._arguments = parser.parse_args()

        mf.setup_logging(logging, self._arguments.v, self._arguments.vv)

        self._path_wave = os.path.join(mf.PATH_HOME, self._arguments.wave_name)

        self._endpoints_loader = EndpointsLoader(endpoint_config_file=self._arguments.config_file_endpoints)
        self._migration_factory_requester = MigrationFactoryRequester(
            self._endpoints_loader
        )
        self._cloud_endure_requester = CloudEndureRequester()

        self._aws_service_accessor = AWSServiceAccessor()

        if self._has_windows_user():
            self._domain_password = EnvironmentVariableFetcher.fetch(
                env_var_names=mf.ENV_VAR_WINDOWS_PASSWORD,
                env_var_description='Windows password',
                default='',
                sensitive=True
            )

        _path = os.path.dirname(os.path.abspath(__file__))

        self._config_loader = ConfigLoader()
        self._notifier = Notifier(config_loader.get_notifications_config())

    def install(self):
        self._install_windows_agent()
        self._install_linux_agent()
        self._agent_check()

    def _install_windows_agent(self):
        print('### Install Windows CloudEndure agent…', end=' ')

        _server_list = self._migration_factory_requester.get_user_servers_by_wave_and_os(filter_wave_name = self._arguments.wave_name, filter_os = 'windows')

        if _server_list is None:
            print('✔ No Windows server in this wave. Nothing to do')

        _api_tokens = self._get_api_tokens()

        if _api_tokens is None:
            return

        for server in _server_list:
            install_command = '/mf_install_windows.ps1 "No" "' + _api_tokens[server[MfField.APP_ID]] + '" "' + server[MfField.SERVER_FQDN] + '"'

            if self._has_windows_user():
                create_path_command = PowershellRunner.authenticate_command(
                    create_path_command,
                    self._arguments.windows_user,
                    self._domain_password
                )

            logging.getLogger('root').info(
                self.__class__.__name__ + ':Running “{}”'.format(command)
            )

            PowershellRunner.run(create_path_command)

        print('✔ done.')

    def _install_linux_agent(self):
        print('### Install Linux CloudEndure agent…', end=' ')

        _server_list = self._migration_factory_requester.get_user_servers_by_wave_and_os(filter_wave_name = self._arguments.wave_name, filter_os = 'linux')

        if _server_list is None:
            print('✔ No Linux server in this wave. Nothing to do')

        _api_tokens = self._get_api_tokens()

        if _api_tokens is None:
            return

        for server in _server_list:
            mf_install_linux_package.install_cloud_endure(server[MfField.SERVER_FQDN], self._arguments.linux_username, self._arguments.linux_private_key_file, 'y', _api_tokens[server[MfField.APP_ID]])

        print('✔ done.')

    def _get_api_tokens(self):
        _apps = self._migration_factory_requester.get_user_apps_by_wave_name(wave_name = self._arguments.wave_name)

        if _apps is None:
            logging.getLogger('root').info('{}: wave “{}” don\'t have cloudendure project)'.format(
                self.__class__.__name__, self._arguments.wave_name
            ))
            return None

        _installation_token_by_app_id = {}

        for app in _apps:
            if MfField.CLOUDENDURE_PROJECT_NAME not in app:
                logging.getLogger('root').info('{}: app “{}” don\'t have cloudendure project)'.format(
                    self.__class__.__name__, app[MfField.APP_NAME]
                ))
                continue

           _installation_token_by_app_id[MfField.APP_ID] = self._cloud_endure_requester.get_api_token(project_name = app[MfField.CLOUDENDURE_PROJECT_NAME])

        return _installation_token_by_app_id

    def _has_windows_user(self):
        return self._arguments.windows_username != ""

    def _agent_check(self):
         _server_list = self._migration_factory_requester.get_user_servers_by_wave(filter_wave_name = self._arguments.wave_name)

         for server in _server_list:
				for i in range(1,5):
                    if self._cloud_endure_requester.get_machine(self.arguments.wave_name, server[MfField.SERVER_FQDN]) is not None:
                        self._migration_factory_requester.put(MigrationFactoryRequester.URI_USER_SERVER.format(server[MfField.SERVER_ID]), data=json.dumps({"migration_status": "CE Agent Install - Success"}))
                        print("“{}”: ✔ Sucess".format(server[MfField.SERVER_FQDN]))
                        if self._arguments.notifier:
                            self._notifier.notify(Notifier.AGENT_INSTALLED, Notifier.AGENT_INSTALLED_MESSAGE.format(server[MfField.SERVER_FQDN], self.arguments.wave_name))
                        break
                    # Expotential backoff algorithm
                     logging.getLogger('root').debug(
                         self.__class__.__name__ + ': Retry “{}”/4'.format(i)
                    )
                    time.sleep(ceil(((2**i) - 1) /2)*5)
                self._migration_factory_requester.put(MigrationFactoryRequester.URI_USER_SERVER.format(server[MfField.SERVER_ID]), data=json.dumps({"migration_status": "CE Agent Install - Failed"}))
                print("“{}”: ✗ Failed".format(server[MfField.SERVER_FQDN]))


if __name__ == '__main__':
    ce_agent_installer = CeAgentInstaller()
    ce_agent_installer.install()
