#!/usr/bin/env python3

import argparse
import os
from mf_library import DefaultsLoader
from mf_library import Utils
from mf_library import AWSServiceAccessor
import mf_library
import logging

class TemplateSecurityGroupCreator:
    """ Create copies of template security groups """

    _arguments = []
    _defaults = {}
    _environments = []
    _path_wave = ''
    _aws_service_accessor = None

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', action='store_true', help='Enable debug outputs')
        parser.add_argument('--wave-name', required=True, help='Name of the wave to prepare')
        parser.add_argument('--wave-sg-prefix', default='rehost', help='Prefix of the Security Group duplicates from the template Security Group')
        parser.add_argument('--config-file-defaults', default=os.environ.get('MF_DEFAULTS_CONFIG_FILE', '/etc/migration_factory/defaults.yml'), help='Configuration file containing default IDs')
        environment_arg = parser.add_argument('--environment', default='prod', help='Environment of the wave')

        self._arguments = parser.parse_args()

        mf_library.setup_logging(self._arguments.v)
        defaults_loader = DefaultsLoader()
        self._defaults = defaults_loader.load(default_config_file=self._arguments.config_file_defaults, environment=self._arguments.environment)

        environment_arg.choices = defaults_loader.getAvailableEnvironments()

        self._arguments = parser.parse_args()

        Utils().check_is_serializable_as_path(self._arguments.wave_name)
        self._path_wave = os.path.join(mf_library.PATH_HOME, self._arguments.wave_name)

        self._aws_service_accessor = AWSServiceAccessor()

    def create(self):
        if not self._template_security_group_id_default_exists():
            logging.debug('No security group template. Skipping security group copy.')
            return None

        print("#####")
        print("#####")
        print("#####")
        print("#####")

        template_security_group = self._aws_service_accessor.get_ec2().describe_security_groups(GroupIds=[
            self._defaults['template_security_group_id']
        ])['SecurityGroups'][0]

        print("#####")
        print("#####")
        print("#####")
        print("#####")

        response = self._aws_service_accessor.get_ec2().create_security_group(
            Description='For the ' + self._arguments.wave_name + ' wave.',
            GroupName=self._arguments.wave_sg_prefix + '-' + self._arguments.wave_name,
            VpcId=template_security_group['VpcId'],
            TagSpecifications=[
                {
                    'ResourceType': 'security-group',
                    'Tags': template_security_group['Tags']
                },
            ],
            DryRun=True
        )

        print(response)


    def _template_security_group_id_default_exists(self):
        return 'template_security_group_id' in self._defaults.keys() and self._defaults['template_security_group_id'] is not ''

    # def _template_security_group_id_default_exists(self):
    #     return 'template_security_group_id' in dict.keys() and self._defaults['template_security_group_id'] is not ''

if __name__ == '__main__':
    template_sg_creator = TemplateSecurityGroupCreator()
    template_sg_creator.create()