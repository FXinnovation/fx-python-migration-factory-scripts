#!/usr/bin/env python3

from __future__ import print_function

import argparse
import getpass
import json
import os
import sys

import requests

# This is mandatory to place before import mf library
# Otherwise, python will not find mf library in its path
sys.path.append('scripts')

import mf
from mf.config_loaders import EndpointsLoader
from mf.utils import EnvironmentVariableFetcher


serverendpoint = '/prod/user/servers'
appendpoint = '/prod/user/apps'
waveendpoint = '/prod/user/waves'


def CreateServerAttributeIfNotExist(attribute_name, attribute_description, attribute_type, token):
    auth = {"Authorization": token}
    apps = json.loads(requests.get(AdminHOST + '/prod/admin/schema/server', headers=auth).text)
    attribute_found = False
    attribute_need_update = False
    for app in apps['attributes']:
        if app['name'] == attribute_name:
            attribute_found = True
            if attribute_description != app['description']:
                attribute_need_update = True
            if attribute_type != app['type']:
                attribute_need_update = True
            break

    if attribute_found and not attribute_need_update:
        print("Attribute " + attribute_name + " is already set")
        return -1

    if attribute_found and attribute_need_update:
        print("Attribute " + attribute_name + " already exist but need to be updated")
        data = {
            "event": "PUT",
            "name": attribute_name,
            "update": {
                "name": attribute_name,
                "description": attribute_description,
                "type": attribute_type,
            }
        }
        r = requests.put(AdminHOST + '/prod/admin/schema/server', headers=auth, data=json.dumps(data))
        if r.status_code == 200:
            print(attribute_name + " server attribute is updated in the migration factory")
            return 0
        else:
            print(attribute_name + " server attribute update failed: " + r.text + ".......")
            return -1

    print("Creating " + attribute_name + " server attribute ...")
    data = {
        "event": "POST",
        "new": {
            "name": attribute_name,
            "description": attribute_description,
            "type": attribute_type,
        }
    }
    r = requests.put(AdminHOST + '/prod/admin/schema/server', headers=auth, data=json.dumps(data))
    if r.status_code == 200:
        print(attribute_name + " server attribute is updated in the migration factory")
        return 0
    else:
        print(attribute_name + " server attribute update failed: " + r.text + ".......")
        return -1


def AddServerAttributeToStage(stage_id, attribute_name, token):
    auth = {"Authorization": token}

    stage = json.loads(requests.get(AdminHOST + '/prod/admin/stage/' + stage_id, headers=auth).text)

    attribute_found = False
    for attribute in stage['attributes']:
        if attribute['attr_name'] == attribute_name and attribute['attr_type'] == 'server':
            attribute_found = True
            break

    if attribute_found:
        print("Serveur atttribute" + attribute_name + " is already set to the stage id " + stage_id)
        return 0

    stage["attributes"].append({"attr_type": "server", "attr_name": attribute_name})

    r = requests.put(AdminHOST + '/prod/admin/stage/' + stage_id, headers=auth, data=json.dumps(stage))
    if r.status_code == 200:
        print(
            attribute_name + " server attribute is updated to the stage " + stage_id + " in the migration factory")
        return 0
    else:
        print(
            attribute_name + " server attribute update failed to the stage " + stage_id + ": " + r.text + ".......")
        return -1


def Factorylogin(username, password, _LoginHOST):
    login_data = {'username': username, 'password': password}
    r = requests.post(_LoginHOST + '/prod/login',
                      data=json.dumps(login_data))
    if r.status_code == 200:
        print("Migration Factory : You have successfully logged in")
        print("")
        token = str(json.loads(r.text))
        return token
    else:
        print("ERROR: Incorrect username or password....")
        print("")
        sys.exit(5)


def main(arguments):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        '--config-file-endpoints',
        default=EnvironmentVariableFetcher.fetch(
            env_var_names=mf.ENV_VAR_ENDPOINT_CONFIG_FILE,
            default=mf.DEFAULT_ENV_VAR_ENDPOINT_CONFIG_FILE
        ),
        help='Configuration file containing the Migration Factory endpoint URLs'
    )
    args = parser.parse_args(arguments)

    global LoginHOST, UserHOST, AdminHOST
    _endpoints_loader = EndpointsLoader(endpoint_config_file=args.config_file_endpoints)
    LoginHOST = _endpoints_loader.get_login_api_url()
    UserHOST = _endpoints_loader.get_user_api_url()
    AdminHOST = _endpoints_loader.get_admin_api_url()

    print("****************************")
    print("*Login to Migration factory*")
    print("****************************")
    if 'MF_USERNAME' not in os.environ:
        username = input('Factory Username: ')
    else:
        username = os.getenv('MF_USERNAME')
    if 'MF_PASSWORD' not in os.environ:
        password = getpass.getpass('Factory Password: ')
    else:
        password = os.getenv('MF_PASSWORD')

    token = Factorylogin(username, password, LoginHOST)

    print("****************************")
    print("*Creating iamRole attribute*")
    print("****************************")

    iam_role_attribute_name = "iamRole"

    CreateServerAttributeIfNotExist(iam_role_attribute_name, iam_role_attribute_name, "string", token)
    AddServerAttributeToStage("1", iam_role_attribute_name, token)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
