#!/usr/bin/env python3

from __future__ import print_function
import sys
import argparse
import requests
import json
import csv
import getpass
import os

serverendpoint = '/prod/user/servers'
appendpoint = '/prod/user/apps'
waveendpoint = '/prod/user/waves'

def CreateServerAttributeIfNotExist(attribute_name, attribute_description, attribute_type, token):
    try:
        auth = {"Authorization": token}
        apps = json.loads(requests.get(AdminHOST + '/prod/admin/schema/server', headers=auth).text)
        attribute_found = False
        attribute_need_update = False
        for app in apps['attributes']:
            if app['name'] == attribute_name:
                attribute_found = True
                if attribute_description != app['description']:
                    attribute_need_update = True 
                if attribute_type != app['type']:
                    attribute_need_update = True 
                break

        if attribute_found and not attribute_need_update:
            print("Attribute " + attribute_name + " is already set")
            return -1

        if attribute_found and attribute_need_update:
            print("Attribute " + attribute_name + " already exist but need to be updated")
            data = {
              "event": "PUT",
              "name": attribute_name,
              "update": {
                "name": attribute_name,
                "description": attribute_description,
                "type": attribute_type,
              }
            }
            r = requests.put(AdminHOST + '/prod/admin/schema/server', headers=auth, data=json.dumps(data))
            if r.status_code == 200:
                print(attribute_name + " server attribute is updated in the migration factory")
                return 0
            else:
                print(attribute_name + " server attribute update failed: " + r.text + ".......")
                return -1

        print("Creating " + attribute_name + " server attribute ...")
        data = {
          "event": "POST",
          "new": {
            "name": attribute_name,
            "description": attribute_description,
            "type": attribute_type,
          }
        }
        r = requests.put(AdminHOST + '/prod/admin/schema/server', headers=auth, data=json.dumps(data))
        if r.status_code == 200:
            print(attribute_name + " server attribute is updated in the migration factory")
            return 0
        else:
            print(attribute_name + " server attribute update failed: " + r.text + ".......")
            return -1
    except:
        print("ERROR: Fail to update server attribute" + attribute_name)
        sys.exit(-1)

def AddServerAttributeToStage(stage_id, attribute_name, token):
    try:
        auth = {"Authorization": token}

        stage = json.loads(requests.get(AdminHOST + '/prod/admin/stage/' + stage_id, headers=auth).text)

        attribute_found = False
        for attribute in stage['attributes']:
            if attribute['attr_name'] == attribute_name and attribute['attr_type'] == 'server':
                attribute_found = True
                break

        if attribute_found:
            print("Serveur atttribute" + attribute_name + " is already set to the stage id " + stage_id)
            return 0

        stage["attributes"].append({"attr_type": "server", "attr_name": attribute_name})
        
        r = requests.put(AdminHOST + '/prod/admin/stage/' + stage_id, headers=auth, data=json.dumps(stage))
        if r.status_code == 200:
            print(attribute_name + " server attribute is updated to the stage " + stage_id + " in the migration factory")
            return 0
        else:
            print(attribute_name + " server attribute update failed to the stage " + stage_id + ": " + r.text + ".......")
            return -1
    except:
        print("ERROR: Fail to add server attribute " + attribute_name + " to stage id " + stage_id)
        sys.exit(-1)

def Factorylogin(username, password, LoginHOST):
    login_data = {'username': username, 'password': password}
    r = requests.post(LoginHOST + '/prod/login',
                  data=json.dumps(login_data))
    if r.status_code == 200:
        print("Migration Factory : You have successfully logged in")
        print("")
        token = str(json.loads(r.text))
        return token
    else:
        print("ERROR: Incorrect username or password....")
        print("")
        sys.exit(5)

def main(arguments):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--EndpointConfigFile', default = os.environ.get('MF_ENDPOINT_CONFIG_FILE', '/etc/migration_factory/endpoints.json'), help= "This can also be set in environment variable MF_ENDPOINT_CONFIG_FILE")
    args = parser.parse_args(arguments)

    with open(args.EndpointConfigFile) as json_file:
        endpoints = json.load(json_file)
    
    global LoginHOST, UserHOST, AdminHOST
    LoginHOST = endpoints['LoginApiUrl']
    UserHOST = endpoints['UserApiUrl']
    AdminHOST = endpoints['AdminApiUrl']

    print("****************************")
    print("*Login to Migration factory*")
    print("****************************")
    if 'MF_USERNAME' not in os.environ:
        username = input('Factory Username: ')
    else:
        username = os.getenv('MF_USERNAME')
    if 'MF_PASSWORD' not in os.environ:
        password = getpass.getpass('Factory Password: ')
    else:
        password = os.getenv('MF_PASSWORD')

    token = Factorylogin(username, password, LoginHOST)

    print("****************************")
    print("*Creating iamRole attribute*")
    print("****************************")

    iam_role_attribute_name = "iamRole"

    CreateServerAttributeIfNotExist(iam_role_attribute_name, iam_role_attribute_name, "string", token)
    AddServerAttributeToStage("1", iam_role_attribute_name, token)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
